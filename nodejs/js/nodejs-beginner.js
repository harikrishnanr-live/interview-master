let beginner = [
  {
    id: 1,
    question: "What is Node.js?",
    answer: "Node.js is like a special tool that lets JavaScript run on computers, not just in web browsers. It helps make websites and apps that work fast for many people.",
    realTimeExample: "Imagine Node.js as a magic box that lets JavaScript run on your computer instead of just in web browsers. It's like having a toy that works everywhere, helping you build fast websites and apps that many people can use without waiting long.",
  },
  {
    id: 2,
    question: "What are the features of Node.js 23?",
    answer: "Node.js 23 has cool things like faster speed, new ways to run code, better web talk, and easy code sharing. It's like an upgraded toy car.",
    realTimeExample: "Imagine Node.js 23 as a new bike with faster wheels, better brakes, and cool new features. It's like upgrading your old bike so you can ride quicker, talk to friends better on the web, and share code easily, making everything smoother and more exciting.",
  },
  {
    id: 3,
    question: "Is Node.js single-threaded?",
    answer: "Yes, Node.js uses one main worker, but it can handle many jobs at once by asking helpers. It's like one chef with many kitchen helpers.",
    realTimeExample: "Imagine Node.js as a busy bee in a garden. Even though there's only one bee working, it has many helper bees (non-blocking I/O) to handle tasks like collecting nectar from flowers. This way, the bee can manage lots of flowers without getting tired, making everything run smoothly.",
  },
  {
    id: 4,
    question: "What is clustering in Node.js?",
    answer: "Clustering makes many copies of your app, each on its own worker. This helps handle more people using it, like more cashiers in a store.",
    syntax: "const cluster = require('cluster'); cluster.fork();",
    example: "if (cluster.isMaster) {\n  for (let i = 0; i < numCPUs; i++) cluster.fork();\n} else {\n  app.listen(3000);\n}",
    realTimeExample: "Imagine clustering in Node.js as opening more ice cream scoops at a party. Each scoop (process) serves its own line of kids (requests), so no one waits long. This way, you can give ice cream to lots of friends quickly, making the party more fun and efficient.",
  },
  {
    id: 5,
    question: "What is a module in Node.js?",
    answer: "A module is a small box of code that does one job. You can use your own boxes or ones from friends. Like LEGO blocks for code.",
    syntax: "const module = require('module-name');",
    example: "const fs = require('fs'); // Core module\nconst myModule = require('./myModule'); // Local module",
    realTimeExample: "Imagine a module in Node.js as a puzzle piece that does one special job, like drawing eyes or a nose. You can use your own pieces or ones from friends, and when you put them together, they make a big, beautiful picture (your app), just like building with LEGO blocks.",
  },
  {
    id: 6,
    question: "What is concurrency?",
    answer: "Concurrency means doing many things at the same time without stopping. Like playing games and eating snacks together.",
    realTimeExample: "Imagine concurrency in Node.js as a juggler at a circus who can throw and catch many balls at the same time without dropping any. It's like handling phone calls, emails, and schedules all together, so the juggler (your app) stays busy and happy without getting overwhelmed.",
  },
  {
    id: 7,
    question: "What is middleware?",
    answer: "Middleware is like a helper that checks and changes things before they go to the main part. Like a gatekeeper at a party.",
    syntax: "app.use(middlewareFunction);",
    example: "app.use((req, res, next) => {\n  console.log('Request received');\n  next();\n});",
    realTimeExample: "Imagine middleware in Node.js as a bouncer at a party who checks everyone's tickets (requests) before letting them in. The bouncer can also give directions or add fun stickers, making sure the party (your app) runs smoothly and only the right people get to the fun parts.",
  },
  {
    id: 8,
    question: "How does Node.js handle concurrency despite being single-threaded?",
    answer: "Node.js starts jobs and waits for them to finish without stopping. When done, it tells you. Like ordering pizza and playing while waiting.",
    realTimeExample: "Imagine Node.js handling concurrency like a waiter in a busy restaurant. The waiter takes orders from customers (requests), tells the kitchen to cook (starts I/O operations), and while waiting, takes more orders. When the food is ready (operation completes), the waiter serves it, keeping everyone happy without long waits.",
  },
  {
    id: 9,
    question: "What is a thread pool?",
    answer: "A thread pool is a group of helpers that do hard jobs so the main worker stays free. Like a team of ants carrying food.",
    realTimeExample: "Imagine a thread pool in Node.js as a team of delivery boys who handle hard jobs like bringing pizza or toys. The main person (main thread) assigns tasks to the boys, so they can keep playing games while the deliveries happen, making sure everything gets done without stopping the fun.",
  },
  {
    id: 10,
    question: "What is control flow in Node.js?",
    answer: "Control flow is the order things happen in code. Like steps in a game: first jump, then run.",
    realTimeExample: "Imagine control flow in Node.js as following a recipe to bake cookies. You mix the ingredients first, then put them in the oven, and finally eat them when done. It's like making sure each step happens in the right order so the cookies turn out perfect and everyone enjoys them.",
  },
  {
    id: 11,
    question: "How do you install Node.js?",
    answer: "Download the installer from the website and run it. Like downloading a game app on your phone.",
    syntax: "node --version, npm --version",
    example: "After installation, check the installed versions:\nnode --version\nnpm --version",
    realTimeExample: "Imagine installing Node.js like getting a new toy from an online store. You download the installer, run it on your computer, and then you can play with it right away, checking if it's ready by seeing its version, just like testing a new toy to make sure it works.",
  },
  {
    id: 12,
    question: "What is npm?",
    answer: "npm is like an app store for code. It helps get and share tools for your projects.",
    syntax: "npm install <package-name>, npm init",
    example: "Install a package:\nnpm install express\nInitialize a new project:\nnpm init",
    realTimeExample: "Imagine npm as a candy shop where you can browse and download different kinds of sweets (packages) to make your party (project) more fun. You can get new candies or update old ones, and it's all about sharing and getting exactly what you need for the best treats.",
  },
  {
    id: 13,
    question: "How do you create a simple HTTP server in Node.js?",
    answer: "Use the http module to make a server that listens for requests and says hello. Like a doorbell that answers.",
    syntax: "const http = require('http'); http.createServer().listen(port);",
    example: "const http = require('http');\nconst server = http.createServer((req, res) => {\n  res.end('Hello World');\n});\nserver.listen(3000, () => {\n  console.log('Server running on port 3000');\n});",
    realTimeExample: "Imagine creating a simple HTTP server in Node.js as setting up a toy phone in your room. It waits for calls (requests) from friends, and when someone calls, it says 'Hello' back, just like answering the phone and greeting them with a smile.",
  },
  {
    id: 14,
    question: "What is the fs module in Node.js?",
    answer: "The fs module helps read and write files. Like a librarian for your computer files.",
    syntax: "const fs = require('fs'); fs.readFile(), fs.writeFile()",
    example: "Read a file:\nfs.readFile('file.txt', 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});",
    realTimeExample: "Imagine the fs module in Node.js as a librarian who helps you read books (files) from the shelves (directories) and write new stories in them. It's like having a helper who organizes your books so you can find and add to your favorite tales easily.",
  },
  {
    id: 15,
    question: "What is asynchronous programming in Node.js?",
    answer: "Asynchronous means doing things without waiting. Like playing and eating at the same time.",
    syntax: "fs.readFile(path, callback), async function() { await promise; }",
    example: "Read a file asynchronously:\nfs.readFile('file.txt', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});",
    realTimeExample: "Imagine asynchronous programming in Node.js as ordering pizza for dinner. You place the order (start the operation), then go play games or watch TV while waiting. When the pizza arrives (operation completes), you eat it, enjoying the meal without wasting time standing by the door.",
  },
  {
    id: 16,
    question: "What are callbacks in Node.js?",
    answer: "Callbacks are like notes that say 'call me back when done'. They run after a job finishes.",
    syntax: "function asyncOperation(callback) { /* operation */ callback(); }",
    example: "Read a file using a callback:\nfs.readFile('file.txt', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});",
    realTimeExample: "Imagine callbacks in Node.js as leaving a message for a friend to call you back when they're done with homework. You go play outside, and when they call (callback executes), you know it's time to hang out, making sure you don't wait around doing nothing.",
  },
  {
    id: 17,
    question: "What are promises in Node.js?",
    answer: "Promises are like promises to do something later. They say 'I will give you this' when ready.",
    syntax: "new Promise((resolve, reject) => { /* operation */ }); promise.then().catch();",
    example: "Create a promise:\nconst promise = new Promise((resolve) => {\n  setTimeout(() => resolve('Done'), 1000);\n});\npromise.then(console.log);",
    realTimeExample: "Imagine promises in Node.js as promising to give a friend candy later. You get a note saying 'candy coming' (promise), and you can plan what to do when it arrives (.then()), like eating it or sharing, without worrying if it will come or not.",
  },
  {
    id: 18,
    question: "What is async/await in Node.js?",
    answer: "Async/await makes waiting easy, like pausing a game until your turn.",
    syntax: "async function myFunction() { const result = await promise; }",
    example: "Read a file using async/await:\nasync function readFile() {\n  const data = await fs.promises.readFile('file.txt', 'utf8');\n  console.log(data);\n}",
    realTimeExample: "Imagine async/await in Node.js as waiting in line for the slide at the playground. You stand there patiently (await), maybe chatting with friends or looking around, until it's your turn to slide down, making the wait feel easy and fun instead of boring.",
  },
  {
    id: 19,
    question: "How do you handle errors in Node.js?",
    answer: "Use try/catch to catch mistakes, like a net for falling balls. Always check for oopsies.",
    syntax: "try { /* code */ } catch (error) { /* handle error */ }, callback(err, data), promise.catch(err => { /* handle error */ })",
    example: "Handle errors in a callback:\nfs.readFile('file.txt', (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(data);\n});",
    realTimeExample: "Imagine handling errors in Node.js as having a bandage for when you scrape your knee. It catches the oopsie (error), tells you what happened, and lets you keep playing (running your app) without everything stopping, just like a bandage helps you feel better and continue the game.",
  },
  {
    id: 20,
    question: "What is the event loop in Node.js?",
    answer: "The event loop checks for jobs and does them one by one. Like a game referee watching players.",
    realTimeExample: "Imagine the event loop in Node.js as a merry-go-round at the park that keeps spinning round and round, picking up kids (events) and letting them ride (execute callbacks) one after another. It makes sure everyone gets a turn without stopping, keeping the fun going smoothly.",
  },
  {
    id: 21,
    question: "What is the difference between require() and import?",
    answer: "Require() is old way to get modules, import is new. Like old vs new toys.",
    syntax: "const module = require('module'); import module from 'module';",
    example: "CommonJS:\nconst fs = require('fs');\nES6:\nimport fs from 'fs';",
    realTimeExample: "Imagine the difference between require() and import as choosing between an old flip phone and a new smartphone. The old phone (require()) works for calling friends, but the new one (import) has cooler features and is easier to use, making your chats more fun and modern.",
  },
  {
    id: 22,
    question: "What is package.json?",
    answer: "Package.json is a list of things your project needs, like a shopping list for code.",
    syntax: "npm init, npm install --save <package>",
    example: "Example `package.json`:\n{\n  'name': 'my-app',\n  'version': '1.0.0',\n  'dependencies': {\n    'express': '^4.17.1'\n  }\n}",
    realTimeExample: "Imagine package.json as a recipe book for baking a cake. It lists all the ingredients (dependencies) and steps (scripts) you need, so you can follow it to make the same yummy cake every time, no matter who is baking.",
  },
  {
    id: 23,
    question: "What are environment variables in Node.js?",
    answer: "Environment variables are secret notes with info, like passwords. Keep them safe.",
    syntax: "process.env.VARIABLE_NAME, export VARIABLE=value",
    example: "Access an environment variable:\nconst port = process.env.PORT || 3000;",
    realTimeExample: "Imagine environment variables in Node.js as hidden treasures in a pirate map that only you can find. They store secret passwords and keys outside your code, so bad guys can't see them, keeping your app safe like a locked treasure chest.",
  },
  {
    id: 24,
    question: "What is the process object in Node.js?",
    answer: "Process object tells about your app, like a report card. Has info and controls.",
    syntax: "process.env, process.argv, process.exit()",
    example: "Log the Node.js version:\nconsole.log(process.version);",
    realTimeExample: "Imagine the process object in Node.js as the dashboard of your toy car. It shows important info like how fast you're going (environment variables) and what you're doing (arguments), and it lets you stop the car (exit the process) when you want to end the ride.",
  },
  {
    id: 25,
    question: "What are buffers in Node.js?",
    answer: "Buffers hold secret code data, like a backpack for bytes.",
    syntax: "Buffer.from(), Buffer.alloc()",
    example: "Create a buffer:\nconst buf = Buffer.from('Hello World');",
    realTimeExample: "Imagine buffers in Node.js as a treasure chest that holds special secret codes (binary data) safely until you need them. It's like keeping your favorite marbles in a box so they don't get lost, ready to use for pictures or messages.",
  },
  {
    id: 26,
    question: "What are streams in Node.js?",
    answer: "Streams send data bit by bit, like a hose spraying water slowly.",
    syntax: "fs.createReadStream(), fs.createWriteStream()",
    example: "Create a read stream:\nconst readStream = fs.createReadStream('large-file.txt');",
    realTimeExample: "Imagine streams in Node.js as a water hose that sprays water (data) in a steady flow instead of dumping a big bucket all at once. This way, you can handle big videos or files without flooding the floor, making everything run smoothly and efficiently.",
  },
  {
    id: 27,
    question: "How do you create a simple Express.js server?",
    answer: "Install Express, make an app, add paths, start listening. Like setting up a lemonade stand.",
    syntax: "npm install express, app.get(), app.listen()",
    example: "Create a basic server:\nconst express = require('express');\nconst app = express();\napp.get('/', (req, res) => res.send('Hello'));\napp.listen(3000, () => console.log('Server running on port 3000'));",
    realTimeExample: "Imagine creating a simple Express.js server as opening a toy store in your neighborhood. You set up the shelves (routes), stock them with toys (handlers), and open the doors (listen on a port) so kids can come in and pick out what they want, making shopping fun and easy.",
  },
  {
    id: 28,
    question: "What is routing in Express.js?",
    answer: "Routing sends requests to the right place, like a map for directions.",
    syntax: "app.get('/path', handler), app.post('/path', handler)",
    example: "Define a route:\napp.get('/users', (req, res) => {\n  res.json(users);\n});",
    realTimeExample: "Imagine routing in Express.js as a GPS in your parents' car that guides you from home to the park. It knows the best paths (endpoints) and tells you exactly where to turn, so you reach your destination (response) without getting lost, making trips fun and straightforward.",
  },
  {
    id: 29,
    question: "What is middleware in Express.js?",
    answer: "Middleware checks and changes requests, like a helper at the door.",
    syntax: "app.use(middleware), function middleware(req, res, next) { }",
    example: "Use JSON parsing middleware:\napp.use(express.json());",
    realTimeExample: "Imagine middleware in Express.js as a friendly doorman at a fancy hotel who greets every guest (request), checks their invitations, and maybe gives them a name tag or directions before letting them into the party (next handler), ensuring everything runs smoothly and safely.",
  },
  {
    id: 30,
    question: "How do you handle static files in Express.js?",
    answer: "Use express.static to serve files like pictures. Like a file box for sharing.",
    syntax: "app.use(express.static('public'))",
    example: "Serve static files:\napp.use(express.static('public'));",
    realTimeExample: "Imagine handling static files in Express.js as showing your photo album to friends at a sleepover. You pull out pictures of your adventures (images, CSS, JS files) and share them easily, so everyone can see and enjoy without you having to draw new ones every time.",
  },
  {
    id: 31,
    question: "What is the difference between PUT and PATCH?",
    answer: "PUT changes everything, PATCH changes parts. Like painting all walls vs one wall.",
    syntax: "app.put('/resource/:id'), app.patch('/resource/:id')",
    example: "PUT example:\napp.put('/users/1', (req, res) => {\n  // Replace entire user\n});\nPATCH example:\napp.patch('/users/1', (req, res) => {\n  // Update only specified fields\n});",
    realTimeExample: "Imagine PUT and PATCH in Express.js as painting your room. PUT is like repainting the whole house with new colors everywhere, changing everything at once. PATCH is like fixing just one spot on the wall, updating only what needs to be changed without touching the rest.",
  },
  {
    id: 32,
    question: "How do you connect to a database in Node.js?",
    answer: "Use special tools to talk to databases. Like plugging in a game to play.",
    syntax: "const mongoose = require('mongoose'); mongoose.connect(uri);",
    example: "Connect to MongoDB:\nmongoose.connect('mongodb://localhost/myapp');",
    realTimeExample: "Imagine connecting to a database in Node.js as linking toy trains together on the tracks. You plug in the special connector (driver), and now your train (app) can ride on the tracks (database) to pick up and drop off cargo (data), making playtime more exciting and organized.",
  },
  {
    id: 33,
    question: "What is CORS in Node.js?",
    answer: "CORS lets or stops requests from other places. Like a club bouncer for websites.",
    syntax: "npm install cors, app.use(cors())",
    example: "Enable CORS:\napp.use(cors({ origin: 'http://localhost:3000' }));",
    realTimeExample: "Imagine CORS in Node.js as a big gate at the playground that decides which kids from different neighborhoods can come play. It checks where they're from (origin) and only lets in the ones allowed, keeping the playground safe and fun for everyone invited.",
  },
  {
    id: 34,
    question: "How do you handle file uploads in Node.js?",
    answer: "Use multer to get files from forms. Like receiving mail.",
    syntax: "npm install multer, const upload = multer()",
    example: "Handle a file upload:\napp.post('/upload', upload.single('file'), (req, res) => {\n  console.log(req.file);\n});",
    realTimeExample: "Imagine handling file uploads in Node.js as having a special mailbox at home that receives letters and packages from friends. You open it, take out the goodies (files), and put them in your room, so you can enjoy the pictures and toys they sent without any trouble.",
  },
  {
    id: 35,
    question: "What is JWT in Node.js?",
    answer: "JWT is a secret pass that proves who you are. Like a VIP ticket.",
    syntax: "npm install jsonwebtoken, jwt.sign(), jwt.verify()",
    example: "Create a JWT:\nconst token = jwt.sign({ userId: 123 }, 'secret');",
    realTimeExample: "Imagine JWT in Node.js as a magic key that proves you're a special guest at a castle party. You show the key (token) to the guards, and they let you in to see the treasures and play games, keeping out anyone who doesn't have the right key.",
  },
  {
    id: 36,
    question: "How do you schedule tasks in Node.js?",
    answer: "Use timers to do things later. Like setting an alarm for bedtime.",
    syntax: "setTimeout(callback, delay), setInterval(callback, interval)",
    example: "Schedule a task:\nsetTimeout(() => console.log('Hello'), 1000);",
    realTimeExample: "Imagine scheduling tasks in Node.js as setting an alarm clock for bedtime stories. You tell the clock when to ring (setTimeout), and it wakes you up at the right time to read books or brush teeth, making sure you don't miss important parts of your day.",
  },
  {
    id: 37,
    question: "What is the global object in Node.js?",
    answer: "Global object has things everyone can use, like a shared toy box.",
    syntax: "global.variable = value, console, setTimeout",
    example: "Set a global variable:\nglobal.myVar = 'Hello';\nconsole.log(global.myVar);",
    realTimeExample: "Imagine the global object in Node.js as a big community pool where all the kids in the neighborhood can swim and play. It has toys and floats (variables and functions) that everyone can share, making it easy to have fun together without bringing your own stuff every time.",
  },
  {
    id: 38,
    question: "How do you debug Node.js applications?",
    answer: "Use tools to find mistakes, like a detective with a magnifying glass.",
    syntax: "node --inspect app.js, debugger;",
    example: "Start debugging:\nnode --inspect-brk app.js",
    realTimeExample: "Imagine debugging Node.js applications as playing detective to find your lost favorite toy in the house. You use a magnifying glass (debugger) to look closely at clues (variables and code), pausing the game to figure out where the toy went, so you can find it and keep playing happily.",
  },
  {
    id: 39,
    question: "What is the REPL in Node.js?",
    answer: "REPL is a playground to try code. Like a sandbox for testing.",
    syntax: "node, .help, .exit",
    example: "Start the REPL:\nType `node` in the terminal, then enter JavaScript code:\n> console.log('Hello');",
    realTimeExample: "Imagine the REPL in Node.js as a magic drawing pad where you can try different colors and shapes without ruining your real artwork. You type in ideas (JavaScript code), see what happens right away, and experiment safely, like practicing drawings before the big picture.",
  },
  {
    id: 40,
    question: "How do you handle child processes in Node.js?",
    answer: "Child processes are little helpers that do jobs. Like sending ants to work.",
    syntax: "const { spawn } = require('child_process'); spawn('command', args);",
    example: "Execute a command:\nconst { exec } = require('child_process');\nexec('ls', (err, stdout) => console.log(stdout));",
    realTimeExample: "Imagine child processes in Node.js as helpful elves in a workshop who take on special jobs like painting or building. The main elf (parent process) tells them what to do, and they work independently, making toys faster and letting the main elf focus on big plans.",
  },
  {
    id: 41,
    question: "What is the path module in Node.js?",
    answer: "Path module helps find files, like a map for your computer.",
    syntax: "const path = require('path'); path.join(), path.resolve()",
    example: "Join paths:\nconst fullPath = path.join(__dirname, 'public', 'index.html');",
    realTimeExample: "Imagine the path module in Node.js as a treasure map that helps you find hidden spots in your backyard. It knows how to read the map on different grounds (operating systems), so you can always dig up the treasure (file) no matter where you are playing.",
  },
  {
    id: 42,
    question: "How do you read command line arguments in Node.js?",
    answer: "Use process.argv to get words from the command line. Like reading a note.",
    syntax: "process.argv",
    example: "Access command line arguments:\nconsole.log(process.argv[2]); // First argument after script name",
    realTimeExample: "Imagine reading command line arguments in Node.js as listening to your mom's instructions for chores. She tells you what to do (arguments), like 'clean your room and feed the dog,' and you follow them step by step to make her happy and get your allowance.",
  },
  {
    id: 43,
    question: "What is the os module in Node.js?",
    answer: "Os module tells about your computer, like asking 'what's your name?'",
    syntax: "const os = require('os'); os.platform(), os.cpus()",
    example: "Get the platform:\nconsole.log(os.platform()); // 'win32', 'linux', etc.",
    realTimeExample: "Imagine the os module in Node.js as asking your computer questions like a curious friend. 'What's your name?' (platform), 'How many arms do you have?' (CPUs), so you can learn about it and play games that work best on its setup.",
  },
  {
    id: 44,
    question: "How do you create and use custom modules in Node.js?",
    answer: "Make a file with code and share it. Like making a toy and giving to friends.",
    syntax: "module.exports = function() {}; const myModule = require('./myModule');",
    example: "In `greet.js`:\nmodule.exports = function(name) {\n  return `Hello, ${name}!`;\n};\nIn `app.js`:\nconst greet = require('./greet');\nconsole.log(greet('Alice'));",
    realTimeExample: "Imagine creating custom modules in Node.js as baking cookies and sharing them with your playmates. You make a special recipe (code), wrap it up (export), and give it to friends so they can enjoy the same yummy treats in their own games without starting from scratch.",
  },
  {
    id: 45,
    question: "What is the util module in Node.js?",
    answer: "Util has helpful tools for code, like a toolbox for fixing things.",
    syntax: "const util = require('util'); util.inspect(), util.promisify()",
    example: "Convert a callback function to a promise:\nconst readFile = util.promisify(fs.readFile);\nreadFile('file.txt', 'utf8').then(data => console.log(data));",
    realTimeExample: "Imagine the util module in Node.js as a magic kit full of tricks for your adventures. It has tools to peek inside boxes (inspect objects), turn old spells into new ones (promisify), and make hard tasks easy, like a helper that makes playing super fun and simple.",
  },
  {
    id: 46,
    question: "How do you handle JSON data in Node.js?",
    answer: "Use JSON.parse to read and JSON.stringify to write. Like translating secret codes.",
    syntax: "JSON.parse(jsonString), JSON.stringify(object)",
    example: "Parse JSON:\nconst obj = JSON.parse('{\"name\": \"John\"}');\nStringify object:\nconst json = JSON.stringify({name: 'John'});",
    realTimeExample: "Imagine handling JSON data in Node.js as using a decoder ring to turn secret messages into words you can read. You parse the code to understand it, and stringify to send it back, like sharing secrets with friends in a way everyone can enjoy the story.",
  },
  {
    id: 47,
    question: "What is the crypto module in Node.js?",
    answer: "Crypto keeps secrets safe, like locking a diary.",
    syntax: "const crypto = require('crypto'); crypto.createHash(), crypto.randomBytes()",
    example: "Create a hash:\nconst hash = crypto.createHash('sha256').update('password').digest('hex');",
    realTimeExample: "Imagine the crypto module in Node.js as a secret safe that locks up your favorite treasures with special codes. It keeps passwords and messages safe from sneaky thieves, so only you and your friends can open it and enjoy the goodies inside.",
  },
  {
    id: 48,
    question: "How do you implement basic authentication in Express.js?",
    answer: "Check names and passwords before letting in. Like a password for your room.",
    syntax: "app.use((req, res, next) => { const auth = req.headers.authorization; });",
    example: "Decode credentials:\nconst credentials = Buffer.from(auth.split(' ')[1], 'base64').toString().split(':');",
    realTimeExample: "Imagine basic authentication in Express.js as having a secret code to enter your treehouse club. You check the code (username and password) at the door, and only friends with the right code can come in to play games and share secrets safely.",
  },
  {
    id: 49,
    question: "What are route parameters in Express.js?",
    answer: "Route parameters are like names in the path, like /users/:id means id is a number.",
    syntax: "app.get('/users/:id', (req, res) => { req.params.id });",
    example: "Define a route with parameters:\napp.get('/users/:id', (req, res) => {\n  const userId = req.params.id;\n  res.send(`User ID: ${userId}`);\n});",
    realTimeExample: "Imagine route parameters in Express.js as name tags at a big family party. When someone calls '/users/5', the '5' is like a name tag that tells you which person (user) they're talking about, so you can find them and give them exactly what they need.",
  },
  {
    id: 50,
    question: "How do you serve JSON responses in Express.js?",
    answer: "Use res.json to send data nicely. Like sending a gift in a box.",
    syntax: "res.json(object)",
    example: "Send a JSON response:\napp.get('/api/users', (req, res) => {\n  res.json({ users: [] });\n});",
    realTimeExample: "Imagine serving JSON responses in Express.js as mailing a letter to a friend. You wrap the message nicely in an envelope (JSON format), add the address, and send it so they get exactly what you wrote, ready to read and enjoy without any mess.",
  },
  {
    id: 51,
    question: "What is body parsing in Express.js?",
    answer: "Body parsing unwraps data from requests. Like opening a present.",
    syntax: "app.use(express.json()), app.use(express.urlencoded())",
    example: "Parse JSON bodies:\napp.use(express.json());\napp.post('/login', (req, res) => {\n  console.log(req.body.username);\n});",
    realTimeExample: "Imagine body parsing in Express.js as unwrapping a candy bar from its wrapper. You take off the paper (parse the body), get to the yummy chocolate inside (data), and enjoy it, making sure you can use all the sweet parts in your games and stories.",
  },
  {
    id: 52,
    question: "How do you handle 404 errors in Express.js?",
    answer: "Add a catch-all for missing pages. Like 'sorry, not found' sign.",
    syntax: "app.use((req, res) => { res.status(404).send('Not Found'); });",
    example: "Handle 404 errors:\napp.get('/api/*', (req, res) => {\n  res.status(404).json({ error: 'API endpoint not found' });\n});",
    realTimeExample: "Imagine handling 404 errors in Express.js as putting up a 'lost' sign when someone can't find their way home. When they ask for a page that doesn't exist, you show them the sign with a friendly message, helping them know they're in the wrong place and guiding them back.",
  },
  {
    id: 53,
    question: "What is session management in Express.js?",
    answer: "Sessions remember you across pages, like a memory game.",
    syntax: "npm install express-session, app.use(session({ secret: 'key' }))",
    example: "Set up session management:\napp.use(session({ secret: 'keyboard cat', resave: false, saveUninitialized: true }));\nreq.session.userId = 123;",
    realTimeExample: "Imagine session management in Express.js as remembering your friends at a long playdate. Even if you go to different rooms, the memory keeps track of who you are and what games you've played, so you can pick up right where you left off without starting over.",
  },
  {
    id: 54,
    question: "How do you implement rate limiting in Express.js?",
    answer: "Limit how many requests per time, like no more than 3 cookies per hour.",
    syntax: "npm install express-rate-limit, const limiter = rateLimit({ windowMs: 60000, max: 100 });",
    example: "Apply rate limiting:\napp.use(limiter);",
    realTimeExample: "Imagine rate limiting in Express.js as having a candy jar with only a few pieces per day. You count how many candies (requests) each friend takes, and when they reach the limit, you say 'no more today' to make sure everyone gets a fair share and no one eats too much too fast.",
  },
  {
    id: 55,
    question: "What is the difference between app.use() and app.get()?",
    answer: "App.use() for all paths, app.get() for specific gets. Like all vs one toy.",
    syntax: "app.use('/api', middleware), app.get('/users', handler)",
    example: "Apply middleware to all routes:\napp.use(express.json());\nHandle GET requests:\napp.get('/users', getUsers);",
    realTimeExample: "Imagine the difference between app.use() and app.get() in Express.js as general rules vs specific directions. App.use() is like a big sign saying 'everyone follow this way for all paths,' while app.get() is like pointing to one specific door and saying 'only go here for this toy,' making sure the right actions happen in the right places.",
  },
  {
    id: 56,
    question: "How do you set up HTTPS in Node.js?",
    answer: "Use https module with keys. Like locking your bike.",
    syntax: "const https = require('https'); https.createServer({ key, cert }, app)",
    example: "Create an HTTPS server:\nconst options = {\n  key: fs.readFileSync('key.pem'),\n  cert: fs.readFileSync('cert.pem')\n};\nhttps.createServer(options, app).listen(443);",
    realTimeExample: "Imagine setting up HTTPS in Node.js as building a secret tunnel under your fort with locks on both ends. It keeps your messages and games safe from spies, so you and your friends can play without anyone sneaking in or stealing your fun ideas.",
  },
  {
    id: 57,
    question: "What is the cluster module in Node.js?",
    answer: "Cluster makes copies of your app for more work. Like clone army.",
    syntax: "const cluster = require('cluster'); cluster.fork()",
    example: "Create a cluster:\nif (cluster.isMaster) {\n  for (let i = 0; i < numCPUs; i++) cluster.fork();\n} else {\n  app.listen(3000);\n}",
    realTimeExample: "Imagine the cluster module in Node.js as having twin helpers who look just like you and do the same jobs. Each twin takes care of different friends (processes), so more kids can play at once, making the party bigger and faster without you getting too tired.",
  },
  {
    id: 58,
    question: "How do you implement logging in Node.js?",
    answer: "Use console.log or tools to record what happens. Like a diary.",
    syntax: "console.log(), npm install winston",
    example: "Set up logging with Winston:\nconst winston = require('winston');\nconst logger = winston.createLogger({\n  transports: [new winston.transports.File({ filename: 'app.log' })]\n});",
    realTimeExample: "Imagine logging in Node.js as writing stories about your app's adventures in a big diary. Every time something happens, like a friend visiting or a game ending, you write it down so you can remember and learn what went well or what to fix next time.",
  },
  {
    id: 59,
    question: "What is the dns module in Node.js?",
    answer: "Dns finds addresses from names. Like a phone book.",
    syntax: "const dns = require('dns'); dns.lookup(), dns.resolve()",
    example: "Perform a DNS lookup:\ndns.lookup('google.com', (err, address) => console.log(address));",
    realTimeExample: "Imagine the dns module in Node.js as a big phone book that turns friend names into their house addresses. When you want to visit 'google.com', it looks up the number (IP address) so you can call or go over, making it easy to connect without knowing the secret codes.",
  },
  {
    id: 60,
    question: "How do you handle WebSockets in Node.js?",
    answer: "Use ws for real-time talk. Like instant messages.",
    syntax: "npm install ws, const WebSocket = require('ws');",
    example: "Create a WebSocket server:\nconst wss = new WebSocket.Server({ port: 8080 });\nwss.on('connection', ws => {\n  ws.send('Hello');\n});",
    realTimeExample: "Imagine WebSockets in Node.js as walkie-talkies that let you talk back and forth instantly without waiting for letters. You and your friend can chat in real time, sending messages as soon as you think of them, making games and stories more exciting and immediate.",
  },
  {
    id: 61,
    question: "What is the querystring module in Node.js?",
    answer: "Querystring reads URL parts. Like decoding a puzzle.",
    syntax: "const qs = require('querystring'); qs.parse(), qs.stringify()",
    example: "Parse a query string:\nqs.parse('name=John&age=30'); // { name: 'John', age: '30' }",
    realTimeExample: "Imagine the querystring module in Node.js as reading secret clues in a treasure hunt that turn codes into words you can understand. When you get a long string like '?name=John&age=30', it breaks it down so you know the name and age, helping you follow the map to the prize.",
  },
  {
    id: 62,
    question: "How do you implement caching in Node.js?",
    answer: "Store data for quick use. Like keeping toys ready.",
    syntax: "const cache = {}; cache[key] = value;",
    example: "Use node-cache:\nconst NodeCache = require('node-cache');\nconst cache = new NodeCache();\ncache.set('key', 'value');",
    realTimeExample: "Imagine caching in Node.js as keeping your favorite toys in a special memory box right next to your bed. When you want to play, you grab them instantly without searching the whole room, making games start faster and more fun every time.",
  },
  {
    id: 63,
    question: "What is the zlib module in Node.js?",
    answer: "Zlib squishes data. Like making a balloon small.",
    syntax: "const zlib = require('zlib'); zlib.gzip(), zlib.gunzip()",
    example: "Compress data:\nzlib.gzip(Buffer.from('Hello World'), (err, buffer) => {});",
    realTimeExample: "Imagine the zlib module in Node.js as a magic zipper that makes your big backpack of toys smaller so you can carry it easier. It squishes files and data down, saving space and making them travel faster, like packing for a trip without leaving anything behind.",
  },
  {
    id: 64,
    question: "How do you handle file watching in Node.js?",
    answer: "Watch files for changes. Like a guard dog for files.",
    syntax: "fs.watch(filename, callback)",
    example: "Watch a file:\nfs.watch('file.txt', (eventType, filename) => {\n  console.log('File changed');\n});",
    realTimeExample: "Imagine file watching in Node.js as having a puppy that barks every time it sees something move in the yard. When files change, it alerts you right away, so you can check what's happening and keep everything safe, like a watchful friend guarding your toys.",
  },
  {
    id: 65,
    question: "What is the events module in Node.js?",
    answer: "Events module sends signals. Like shouting 'go'.",
    syntax: "const EventEmitter = require('events'); emitter.on(), emitter.emit()",
    example: "Create an event emitter:\nconst emitter = new EventEmitter();\nemitter.on('event', () => console.log('Event fired'));\nemitter.emit('event');",
    realTimeExample: "Imagine the events module in Node.js as a big bell that rings to signal when something important happens, like starting a game or calling everyone for dinner. Objects can shout 'event!' and listeners tune in to respond, making sure the right actions happen at the right times.",
  },
  {
    id: 66,
    question: "How do you implement pagination in Express.js?",
    answer: "Show data in pages. Like book pages.",
    syntax: "const page = req.query.page || 1; const limit = req.query.limit || 10;",
    example: "Implement pagination:\nconst offset = (page - 1) * limit;\nconst results = await Model.findAll({ limit, offset });",
    realTimeExample: "Imagine pagination in Express.js as flipping through pages in a big storybook one at a time. Instead of showing all the pictures at once, you see a few per page, making it easy to read without getting overwhelmed, and you can turn to the next part when you're ready.",
  },
  {
    id: 67,
    question: "What is input validation in Express.js?",
    answer: "Check if input is good. Like tasting food before eating.",
    syntax: "npm install express-validator, body('field').isEmail()",
    example: "Validate user input:\napp.post('/user', body('email').isEmail(), (req, res) => {});",
    realTimeExample: "Imagine input validation in Express.js as a quality check at the toy factory where workers taste cookies to make sure they're good before packing them. It checks the data you send to ensure it's correct and safe, preventing bad toys from going out and keeping everything fun.",
  },
  {
    id: 68,
    question: "How do you implement file downloads in Express.js?",
    answer: "Use res.download to send files. Like giving a toy.",
    syntax: "res.download(path), res.sendFile(path)",
    example: "Enable file downloads:\napp.get('/download', (req, res) => {\n  res.download('/path/to/file.pdf');\n});",
    realTimeExample: "Imagine file downloads in Express.js as sharing your favorite candy with friends at school. When they ask for some, you give them a piece from your bag, wrapped nicely so they can take it home and enjoy it, just like sending files safely to their computers.",
  },
  {
    id: 69,
    question: "What is the helmet middleware in Express.js?",
    answer: "Helmet protects your app. Like a safety hat.",
    syntax: "npm install helmet, app.use(helmet())",
    example: "Use helmet:\napp.use(helmet());",
    realTimeExample: "Imagine the helmet middleware in Express.js as wearing a superhero cape and mask that protects you from villains trying to sneak in. It adds special shields to your app, blocking bad tricks like sneaky attacks, so you can play safely without worrying about getting caught.",
  },
  {
    id: 70,
    question: "How do you implement API versioning in Express.js?",
    answer: "Use versions like v1, v2. Like game levels.",
    syntax: "app.use('/api/v1', routes), Accept-Version header",
    example: "Version your API:\napp.use('/api/v1/users', userRoutesV1);\napp.use('/api/v2/users', userRoutesV2);",
    realTimeExample: "Imagine API versioning in Express.js as having different editions of your favorite comic book, like old ones with simple stories and new ones with more adventures. You keep both so old fans can read the classics while new friends enjoy the updates, without mixing them up.",
  },
  {
    id: 71,
    question: "What is the morgan middleware in Express.js?",
    answer: "Morgan logs visits. Like a visitor book.",
    syntax: "npm install morgan, app.use(morgan('combined'))",
    example: "Log requests:\napp.use(morgan('tiny'));",
    realTimeExample: "Imagine the morgan middleware in Express.js as a big diary where you write down every visitor to your house, noting who came, when they arrived, and what they did. It helps you remember all the fun visits and spot any patterns, like knowing when friends like to play.",
  },
  {
    id: 72,
    question: "How do you handle form data in Express.js?",
    answer: "Use middleware to read forms. Like reading a letter.",
    syntax: "app.use(express.urlencoded({ extended: true }))",
    example: "Parse form data:\napp.use(express.urlencoded());\napp.post('/submit', (req, res) => {\n  console.log(req.body);\n});",
    realTimeExample: "Imagine handling form data in Express.js as opening a letter from grandma with pictures and notes inside. You carefully unwrap it, read the message, and use the goodies, making sure to enjoy every part without losing anything in the envelope.",
  },
  {
    id: 73,
    question: "What is the compression middleware in Express.js?",
    answer: "Compression makes data small. Like squeezing a sponge.",
    syntax: "npm install compression, app.use(compression())",
    example: "Compress responses:\napp.use(compression());",
    realTimeExample: "Imagine the compression middleware in Express.js as a magic vacuum that sucks up your big pile of toys and makes them fit into a tiny box for easy carrying. It shrinks responses so they travel super fast, like sending a quick note instead of a heavy package.",
  },
  {
    id: 74,
    question: "How do you implement basic routing in Express.js?",
    answer: "Define paths for requests. Like roads to places.",
    syntax: "app.get('/path', handler), app.post('/path', handler)",
    example: "Define a route:\napp.get('/hello', (req, res) => res.send('Hello World'));",
    realTimeExample: "Imagine basic routing in Express.js as a colorful map in a theme park that shows you exactly where to go for the roller coaster or ice cream stand. It directs requests to the right fun spots, so everyone finds what they're looking for without getting lost in the crowd.",
  },
  {
    id: 75,
    question: "What is the serve-favicon middleware in Express.js?",
    answer: "Serve-favicon shows the site icon. Like a team badge.",
    syntax: "npm install serve-favicon, app.use(favicon(path))",
    example: "Serve a favicon:\napp.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));",
    realTimeExample: "Imagine the serve-favicon middleware in Express.js as wearing your favorite team badge on your shirt during a game. It shows a tiny picture (icon) in the browser tab, so everyone knows it's your site, like a special mark that makes it easy to spot and remember.",
  },
  {
    id: 76,
    question: "How do you handle cookies in Express.js?",
    answer: "Cookies store small info. Like notes in pockets.",
    syntax: "npm install cookie-parser, app.use(cookieParser())",
    example: "Set and read cookies:\nres.cookie('name', 'value');\nconsole.log(req.cookies.name);",
    realTimeExample: "Imagine handling cookies in Express.js as hiding little notes in secret pockets of your jacket. They store small reminders, like your favorite color or last game score, so your app remembers you across visits without forgetting, keeping things personal and fun.",
  },
  {
    id: 77,
    question: "What is the method-override middleware in Express.js?",
    answer: "Method-override uses other methods in forms. Like a trick for old toys.",
    syntax: "npm install method-override, app.use(methodOverride())",
    example: "Override HTTP methods:\napp.use(methodOverride('_method'));",
    realTimeExample: "Imagine the method-override middleware in Express.js as pretending your old toy car can fly like a new spaceship. It tricks the system into using different actions (like PUT or DELETE) even when forms only know GET and POST, making old toys do cool new tricks without buying anything.",
  },
  {
    id: 78,
    question: "How do you implement basic templating in Express.js?",
    answer: "Use engines to fill in blanks. Like coloring a picture.",
    syntax: "app.set('view engine', 'ejs'), res.render('template', data)",
    example: "Set up templating:\napp.set('view engine', 'ejs');\napp.get('/', (req, res) => res.render('index', { title: 'Home' }));",
    realTimeExample: "Imagine basic templating in Express.js as filling in the blanks of a coloring book with your favorite colors and words. It takes plain pages and adds pictures and stories dynamically, so each time you open it, it looks new and personalized, just like creating your own adventure.",
  },
  {
    id: 79,
    question: "What is the response-time middleware in Express.js?",
    answer: "Response-time shows how long replies take. Like a timer.",
    syntax: "npm install response-time, app.use(responseTime())",
    example: "Add response time:\napp.use(responseTime());",
    realTimeExample: "Imagine the response-time middleware in Express.js as a big stopwatch that times how long it takes to run a race. It adds a note to your finish line saying 'you did it in 10 seconds,' helping you see if you're getting faster and making games more exciting to track.",
  },
  {
    id: 80,
    question: "How do you handle redirects in Express.js?",
    answer: "Redirects send to new places. Like 'go there instead'.",
    syntax: "res.redirect(status, path)",
    example: "Redirect users:\napp.get('/old-path', (req, res) => res.redirect(301, '/new-path'));",
    realTimeExample: "Imagine redirects in Express.js as a friendly detour sign on a bike path that says 'the old way is blocked, go this new way instead.' It sends you to a better spot, like finding a shortcut to the park when the usual path has a puddle.",
  },
  {
    id: 81,
    question: "What is the vhost middleware in Express.js?",
    answer: "Vhost serves different apps on subdomains. Like rooms in a house.",
    syntax: "npm install vhost, app.use(vhost('sub.example.com', subApp))",
    example: "Serve apps on subdomains:\napp.use(vhost('api.example.com', apiApp));\napp.use(vhost('www.example.com', webApp));",
    realTimeExample: "Imagine the vhost middleware in Express.js as having separate playhouses in your backyard, each for different games. One house is for dolls, another for cars, so friends know exactly where to go for their favorite fun without mixing everything up.",
  },
  {
    id: 82,
    question: "How do you implement basic error handling in Express.js?",
    answer: "Use error middleware to catch mistakes. Like a catcher for balls.",
    syntax: "app.use((err, req, res, next) => { res.status(500).send('Error'); })",
    example: "Handle errors:\napp.use((err, req, res, next) => {\n  console.error(err);\n  res.status(500).json({ error: 'Internal Server Error' });\n});",
    realTimeExample: "Imagine basic error handling in Express.js as a soft trampoline under the playground swings that catches you if you slip. It grabs mistakes before they make everything stop, giving a gentle bounce back so you can keep playing without getting hurt or scared.",
  },
  {
    id: 83,
    question: "What is the connect-timeout middleware in Express.js?",
    answer: "Connect-timeout stops slow requests. Like a timeout in games.",
    syntax: "npm install connect-timeout, app.use(timeout('5s'))",
    example: "Set a timeout:\napp.use(timeout('10s'));\napp.use(haltOnTimedout);",
    realTimeExample: "Imagine the connect-timeout middleware in Express.js as a game buzzer that goes off if you take too long to answer a question. It stops slow requests from hanging around, making sure the game stays fast and fun for everyone without waiting forever.",
  },
  {
    id: 84,
    question: "How do you serve static assets in Express.js?",
    answer: "Serve files like pictures directly. Like a photo frame.",
    syntax: "app.use(express.static('public'))",
    example: "Serve static files:\napp.use('/assets', express.static('public'));",
    realTimeExample: "Imagine serving static assets in Express.js as a glass display case in a museum that shows off your favorite pictures and drawings. It lets visitors look at them easily without touching, making your art gallery fun and accessible for everyone to enjoy.",
  },
  {
    id: 85,
    question: "What is the express-session middleware?",
    answer: "Express-session remembers users. Like a memory keeper.",
    syntax: "npm install express-session, app.use(session(options))",
    example: "Set up sessions:\napp.use(session({ secret: 'keyboard cat', resave: false, saveUninitialized: true }));",
    realTimeExample: "Imagine the express-session middleware as a magical friend list that remembers your name and what games you've played every time you visit the playground. It keeps track of your favorites so you can pick up right where you left off, making every playtime feel special and connected.",
  },
  {
    id: 86,
    question: "How do you implement CSRF protection in Express.js?",
    answer: "CSRF stops fake requests. Like a secret code for safety.",
    syntax: "npm install csurf, app.use(csurf())",
    example: "Enable CSRF protection:\napp.use(csurf());\napp.get('/form', (req, res) => res.render('form', { csrfToken: req.csrfToken() }));",
    realTimeExample: "Imagine CSRF protection in Express.js as a secret password that only you and your trusted friends know. It stops sneaky strangers from pretending to be you and messing with your games, keeping your playtime safe and only for the real players.",
  },
  {
    id: 87,
    question: "What is the connect-flash middleware in Express.js?",
    answer: "Connect-flash shows one-time messages. Like a quick note.",
    syntax: "npm install connect-flash, app.use(flash())",
    example: "Use flash messages:\nreq.flash('success', 'Item created');\nres.locals.messages = req.flash();",
    realTimeExample: "Imagine the connect-flash middleware in Express.js as a quick flash card that pops up with a message like 'Great job!' and then disappears after you see it. It shows one-time notes to remind you of things, keeping your attention without cluttering the space.",
  },
  {
    id: 88,
    question: "How do you handle multipart uploads in Express.js?",
    answer: "Use multer for file uploads. Like receiving packages.",
    syntax: "npm install multer, const upload = multer()",
    example: "Handle file uploads:\napp.post('/upload', upload.single('file'), (req, res) => {\n  console.log(req.file);\n});",
    realTimeExample: "Imagine multipart uploads in Express.js as receiving a big package of toys and drawings from a friend. You open it carefully, sort out the goodies, and put them in your toy box, making sure everything arrives safely and ready to play with.",
  },
  {
    id: 89,
    question: "What is the express-validator middleware?",
    answer: "Express-validator checks data. Like a teacher grading.",
    syntax: "npm install express-validator, body('field').isEmail()",
    example: "Validate input:\napp.post('/user', body('email').isEmail(), (req, res) => {});",
    realTimeExample: "Imagine the express-validator middleware as a friendly checker at the bakery who tastes every cookie to make sure it's just right. It looks at the ingredients (data) you send, checks for mistakes, and only lets the perfect ones through, keeping everything yummy and safe.",
  },
  {
    id: 90,
    question: "How do you implement API documentation in Express.js?",
    answer: "Use tools to write API guides. Like a map for explorers.",
    syntax: "npm install swagger-jsdoc swagger-ui-express",
    example: "Set up API documentation:\nconst swaggerUi = require('swagger-ui-express');\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));",
    realTimeExample: "Imagine API documentation in Express.js as a big instruction booklet that comes with your new toy, showing pictures and steps on how to play with it. It tells developers exactly how to use your app, making it easy for them to have fun without guessing.",
  },
  {
    id: 91,
    question: "What is the passport middleware for authentication?",
    answer: "Passport checks who you are. Like a guard at the door.",
    syntax: "npm install passport passport-local, passport.use(strategy)",
    example: "Set up local authentication:\npassport.use(new LocalStrategy((username, password, done) => {\n  // Verify credentials\n}));",
    realTimeExample: "Imagine the passport middleware for authentication as a special key that only fits your lock, letting only the right people into your secret clubhouse. It checks who you are with different ways, like passwords or magic cards, keeping your games safe from strangers.",
  },
  {
    id: 92,
    question: "How do you implement logging with Winston in Node.js?",
    answer: "Winston records events. Like a storybook.",
    syntax: "npm install winston, winston.createLogger()",
    example: "Set up logging:\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [new winston.transports.Console()]\n});\nlogger.info('Hello');",
    realTimeExample: "Imagine logging with Winston in Node.js as keeping a big adventure diary where you write down every exciting thing that happens, like who won the game or what treasure you found. It helps you remember and learn from your app's stories, making debugging like reading a fun book.",
  },
  {
    id: 93,
    question: "What is PM2 and how do you use it?",
    answer: "PM2 manages apps, keeps them running. Like a babysitter for code.",
    syntax: "npm install -g pm2, pm2 start app.js",
    example: "Start and manage an app:\npm2 start app.js --name 'my-app';\npm2 monit;\npm2 restart my-app;",
    realTimeExample: "Imagine PM2 as a friendly coach who watches over your sports team (apps), making sure everyone plays their best and doesn't get tired. It starts new players when needed, fixes problems, and keeps the game going smoothly, even when you're not there.",
  },
  {
    id: 94,
    question: "How do you implement basic testing in Node.js?",
    answer: "Use Jest to check if code works. Like testing a toy.",
    syntax: "npm install jest, describe(), it(), expect()",
    example: "Write a test:\ndescribe('Math', () => {\n  it('should add', () => {\n    expect(1 + 1).toBe(2);\n  });\n});",
    realTimeExample: "Imagine basic testing in Node.js as taking a fun quiz where you check if your answers are right, like seeing if your drawing matches the picture. It runs little tests on your code to make sure everything works perfectly, helping you build strong and reliable toys.",
  },
  {
    id: 95,
    question: "What is Docker and how do you containerize a Node.js app?",
    answer: "Docker is like a magic box that packs your app with everything it needs. To containerize, make a special file and run commands to put your app in the box.",
    syntax: "FROM node:14, COPY ., RUN npm install, CMD ['node', 'app.js']",
    example: "Create a Dockerfile:\nFROM node:16\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD ['node', 'app.js']",
    realTimeExample: "Imagine Docker as a special lunchbox that packs all your favorite foods and drinks in one neat container, ready to take to school. It keeps everything fresh and together, so you can enjoy your meal anywhere without worrying about spills or missing pieces.",
  },
  {
    id: 96,
    question: "How do you handle database connections in Node.js?",
    answer: "Use pools to connect to databases safely. Like sharing toys nicely.",
    syntax: "const pool = mysql.createPool(config); pool.query()",
    example: "Set up a connection pool:\nconst pool = mysql.createPool({ host: 'localhost', user: 'root', database: 'test' });",
    realTimeExample: "Imagine database connections in Node.js as sharing phone lines in a house where everyone takes turns calling friends. You reuse the lines carefully without hanging up too soon, making sure calls go smoothly and no one gets cut off, keeping conversations happy and connected.",
  },
  {
    id: 97,
    question: "What is GraphQL and how do you implement it in Node.js?",
    answer: "GraphQL is like asking for exactly what you want from a menu. Use Apollo to set it up.",
    syntax: "npm install apollo-server-express, graphql",
    example: "Set up a GraphQL server:\nconst { ApolloServer, gql } = require('apollo-server-express');\nconst typeDefs = gql`type Query { hello: String }`;",
    realTimeExample: "Imagine GraphQL as going to an ice cream shop where you pick exactly the toppings you want on your cone, like extra sprinkles but no nuts. It lets you ask for just the right scoops (data), making your treat perfect without wasting or missing anything.",
  },
  {
    id: 98,
    question: "How do you implement caching with Redis in Node.js?",
    answer: "Redis stores data fast. Connect and use it like a quick drawer.",
    syntax: "npm install redis, const redis = require('redis')",
    example: "Connect to Redis:\nconst client = redis.createClient();\nclient.set('key', 'value');\nclient.get('key', (err, reply) => console.log(reply));",
    realTimeExample: "Imagine caching with Redis in Node.js as having a super-fast memory box next to your bed where you keep your favorite toys for instant grabbing. When you need something, it's right there, saving time and making play start immediately without searching everywhere.",
  },
  {
    id: 99,
    question: "What is the difference between process.nextTick() and setImmediate()?",
    answer: "NextTick does things soon, setImmediate after. Like urgent vs later tasks.",
    syntax: "process.nextTick(callback), setImmediate(callback)",
    example: "Compare execution order:\nprocess.nextTick(() => console.log('nextTick'));\nsetImmediate(() => console.log('setImmediate'));",
    realTimeExample: "Imagine the difference between process.nextTick() and setImmediate() in Node.js as choosing between doing your homework now or after snack time. NextTick does urgent tasks right away, while setImmediate waits a bit, helping you organize your day so important things get done first.",
  },
  {
    id: 100,
    question: "How do you implement graceful shutdown in Node.js?",
    answer: "Listen for stop signals and clean up. Like tidying before bed.",
    syntax: "process.on('SIGTERM', () => { server.close(() => process.exit(0)); })",
    example: "Handle shutdown:\nprocess.on('SIGINT', () => {\n  console.log('Shutting down...');\n  db.close(() => process.exit(0));\n});",
    realTimeExample: "Imagine graceful shutdown in Node.js as closing your lemonade stand at the end of the day. You clean up the cups, put away the pitchers, and lock the gate, making sure everything is tidy and ready for tomorrow without spilling anything or leaving messes.",
  },
  {
    id: 101,
    question: "What is the vm module in Node.js?",
    answer: "Vm runs code in safe spaces. Like a playpen for code.",
    syntax: "const vm = require('vm'); vm.runInContext()",
    example: "Run code in a context:\nconst script = new vm.Script('a + b');\nconst context = { a: 1, b: 2 };\nscript.runInContext(context);",
    realTimeExample: "Imagine the vm module in Node.js as a safe sandbox in the playground where you can build sandcastles without messing up the real yard. It lets you run code in a protected space, so experiments are fun and don't affect your main toys or games.",
  },
  {
    id: 102,
    question: "How do you handle memory leaks in Node.js?",
    answer: "Watch memory and fix leaks. Like plugging holes in a boat.",
    syntax: "process.memoryUsage(), --inspect",
    example: "Check memory usage:\nconsole.log(process.memoryUsage());",
    realTimeExample: "Imagine handling memory leaks in Node.js as fixing a leaky faucet in the bathroom that wastes water. You check the pipes, plug the holes, and make sure everything runs smoothly without wasting resources, keeping your bathroom (app) clean and efficient.",
  },
  {
    id: 103,
    question: "What is the inspector module in Node.js?",
    answer: "Inspector helps look inside your app. Like a doctor for code.",
    syntax: "const inspector = require('inspector'); inspector.open()",
    example: "Open the inspector:\ninspector.open(9229, 'localhost', true);",
    realTimeExample: "Imagine the inspector module in Node.js as taking x-rays of your toys to see what's inside without breaking them open. It lets you peek at how your app works, find hidden problems, and fix them gently, like a doctor checking for boo-boos.",
  },
  {
    id: 104,
    question: "How do you implement internationalization (i18n) in Node.js?",
    answer: "Use i18next for different languages. Like speaking many tongues.",
    syntax: "npm install i18next, i18next.init()",
    example: "Set up i18n:\ni18next.init({\n  lng: 'en',\n  resources: {\n    en: { translation: { hello: 'Hello' } }\n  }\n});",
    realTimeExample: "Imagine internationalization (i18n) in Node.js as having a magical translator friend who speaks many languages and changes your stories to match what kids around the world understand. It makes your app friendly for everyone, no matter where they live or what they speak.",
  },
  {
    id: 105,
    question: "What is the perf_hooks module in Node.js?",
    answer: "Perf_hooks times how fast things go. Like a stopwatch.",
    syntax: "const { performance } = require('perf_hooks'); performance.now()",
    example: "Measure performance:\nconst start = performance.now();\n// Some code\nconst end = performance.now();\nconsole.log(end - start);",
    realTimeExample: "Imagine the perf_hooks module in Node.js as a stopwatch for timing races in the playground. It measures how long games take, like running from the slide to the swings, helping you see who's fastest and make everything run quicker and more fun.",
  },
  {
    id: 106,
    question: "How do you implement job queues in Node.js?",
    answer: "Use Bull for background jobs. Like a to-do list.",
    syntax: "npm install bull, new Queue()",
    example: "Create a job queue:\nconst Queue = require('bull');\nconst myQueue = new Queue('my-queue');\nmyQueue.add({ foo: 'bar' });",
    realTimeExample: "Imagine job queues in Node.js as a list of chores you do one by one after school, like cleaning your room then feeding the dog. It lets your app handle tasks in the background without stopping playtime, keeping everything organized and fun.",
  },
  {
    id: 107,
    question: "What is the assert module in Node.js?",
    answer: "Assert checks if things are true. Like fact checking.",
    syntax: "const assert = require('assert'); assert.equal()",
    example: "Test with assertions:\nassert.equal(1 + 1, 2); // Passes\nassert.equal(1 + 1, 3); // Throws",
    realTimeExample: "Imagine the assert module in Node.js as playing true or false games where you check if answers are correct, like saying 'the sky is blue' and making sure it's true. It helps your code play fair and catch mistakes, keeping games honest and fun.",
  },
  {
    id: 108,
    question: "How do you implement real-time notifications in Node.js?",
    answer: "Use socket.io for instant messages. Like texting friends.",
    syntax: "npm install socket.io, io.on('connection')",
    example: "Set up real-time notifications:\nio.on('connection', (socket) => {\n  socket.emit('notification', 'Hello!');\n});",
    realTimeExample: "Imagine real-time notifications in Node.js as sending instant notes to your friends during class, like passing a message that says 'recess now!' right when it happens. It lets everyone know updates immediately, making games and chats exciting without waiting.",
  },
  {
    id: 109,
    question: "What is the readline module in Node.js?",
    answer: "Readline reads lines from input. Like listening to stories.",
    syntax: "const readline = require('readline'); readline.createInterface()",
    example: "Read user input:\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nrl.question('What is your name? ', (answer) => {\n  console.log(answer);\n});",
    realTimeExample: "Imagine the readline module in Node.js as asking your mom questions during dinner, like 'can I have more juice?' and waiting patiently for her answer. It reads what you type line by line, making conversations with your app feel like talking to a friend.",
  },
  {
    id: 110,
    question: "How do you implement API rate limiting with Redis?",
    answer: "Use Redis to count requests. Like limiting candy.",
    syntax: "redis.incr(), redis.expire()",
    example: "Limit requests:\nredis.incr(`requests:${userId}`);\nredis.expire(`requests:${userId}`, 3600);",
    realTimeExample: "Imagine API rate limiting with Redis as having turn limits in a board game, where each player can only roll the dice so many times before waiting. It counts requests and says 'your turn is over' to keep the game fair and stop anyone from hogging all the fun.",
  },
  {
    id: 111,
    question: "What is the difference between Buffer and string in Node.js?",
    answer: "Buffer is raw data, string is words. Like bytes vs letters.",
    syntax: "Buffer.from('text'), 'text'.toString()",
    example: "Convert between Buffer and string:\nconst buf = Buffer.from('Hello');\nconst str = buf.toString();",
    realTimeExample: "Imagine the difference between Buffer and string in Node.js as choosing between raw cookie dough (bytes) and baked cookies (words). Buffers hold secret codes for pictures and files, while strings are the readable stories, helping you turn dough into yummy treats.",
  },
  {
    id: 112,
    question: "What is the purpose of the `package-lock.json` file?",
    answer: "Package-lock.json locks versions. Like a receipt for exact buys.",
    example: "When you run `npm install`, npm uses `package-lock.json` to install the exact versions listed.",
    realTimeExample: "Imagine the package-lock.json file as a special shopping list that remembers exactly which candies and toys you bought last time, so when you go shopping again, you get the same yummy treats and fun games without any surprises or missing pieces.",
    syntax: "Automatically generated by `npm install`.",
  },
  {
    id: 113,
    question: "What is the difference between `exports` and `module.exports`?",
    answer: "Exports is a shortcut, module.exports is direct. Like alias vs real name.",
    example: "Named exports:\nexports.myFunction = function() {};\nDefault exports:\nmodule.exports = function() {};",
    realTimeExample: "Imagine the difference between exports and module.exports as having a nickname for your best friend. 'Exports' is like calling your friend 'Buddy' instead of their full name, but if you change 'Buddy' to mean someone else, it doesn't affect your real friend anymore.",
    syntax: "exports.myVar = 'value'; module.exports = { myVar: 'value' };",
  },
  {
    id: 114,
    question: "How do you use environment variables in a Node.js project?",
    answer: "Use dotenv to load secrets. Like hidden notes.",
    example: "1. Install `dotenv`:\n   npm install dotenv\n2. Create a `.env` file:\n   DB_PASSWORD=secret\n3. Load it in your app:\n   require('dotenv').config();\n4. Access variables:\n   const password = process.env.DB_PASSWORD;",
    realTimeExample: "Imagine using environment variables in Node.js as hiding your secret treasure map in a special box that only you can open. It keeps your passwords and keys safe from sneaky pirates, so your adventures stay fun and protected.",
    syntax: "require('dotenv').config(); process.env.VARIABLE_NAME",
  },
  {
    id: 115,
    question: "What is the purpose of the `node_modules` folder?",
    answer: "Node_modules holds all tools. Like a toolbox.",
    example: "When you run `npm install express`, the `express` package and its dependencies are downloaded into `node_modules`.",
    realTimeExample: "Imagine the node_modules folder as a magical pantry in your kitchen where all the special ingredients for your recipes are stored. Every time you want to bake cookies, you grab the chocolate chips and flour from there, keeping everything ready for yummy treats.",
    syntax: "Generated by `npm install` or `yarn install`.",
  },
  {
    id: 116,
    question: "How do you debug a Node.js application?",
    answer: "Use inspect to look inside. Like finding bugs.",
    example: "1. Start your app:\n   node --inspect app.js\n2. Open Chrome DevTools and go to `chrome://inspect`\n3. Click on your app to start debugging.",
    realTimeExample: "Imagine debugging a Node.js application as being a super detective in a mystery movie, using your magnifying glass to find hidden clues in the code. You pause the action, examine the variables like footprints, and solve the puzzle to make everything work perfectly again.",
    syntax: "node --inspect app.js, debugger;",
  },
  {
    id: 117,
    question: "What is the purpose of the `require` function in Node.js?",
    answer: "Require brings in tools. Like borrowing toys.",
    example: "Include a core module:\nconst fs = require('fs');\nInclude a local file:\nconst myModule = require('./myModule');\nInclude a third-party package:\nconst express = require('express');",
    realTimeExample: "Imagine the require function in Node.js as calling your friends over to play, bringing their favorite toys and games to your house. It lets you borrow their tools and fun ideas, making your playtime more exciting with all the things you need right there.",
    syntax: "const module = require('module-name');",
  },
  {
    id: 118,
    question: "How do you create a custom module in Node.js?",
    answer: "Write code and export it. Like making and sharing toys.",
    example: "In `greet.js`:\nmodule.exports = function(name) {\n  return `Hello, ${name}!`;\n};\nIn `app.js`:\nconst greet = require('./greet');\nconsole.log(greet('Alice'));",
    realTimeExample: "Imagine creating a custom module in Node.js as baking a batch of special cookies with your secret recipe and sharing them with your friends at the park. You make the treats, wrap them up nicely, and give them out so everyone can enjoy the same yummy goodness in their own picnics.",
    syntax: "module.exports = function() {}; const myModule = require('./myModule');",
  },
  {
    id: 119,
    question: "What is the purpose of the `process` object in Node.js?",
    answer: "Process tells about your app. Like a info board.",
    example: "Access environment variables:\nprocess.env.NODE_ENV\nAccess command-line arguments:\nprocess.argv\nExit the process:\nprocess.exit(1);",
    realTimeExample: "Imagine the process object in Node.js as the control panel in a spaceship, showing all the important buttons and screens like speed, fuel, and directions. It tells you what's happening and lets you steer the ship, keeping your adventure safe and on track.",
    syntax: "process.env, process.argv, process.exit()",
  },
  {
    id: 120,
    question: "How do you handle errors in asynchronous code in Node.js?",
    answer: "Use try/catch and promises. Like safety nets.",
    example: "With callbacks:\nfs.readFile('file.txt', (err, data) => {\n  if (err) return console.error(err);\n  console.log(data);\n});\nWith promises:\nfs.promises.readFile('file.txt').then(data => console.log(data)).catch(err => console.error(err));\nWith async/await:\nasync function readFile() {\n  try {\n    const data = await fs.promises.readFile('file.txt');\n    console.log(data);\n  } catch (err) {\n    console.error(err);\n  }\n}",
    realTimeExample: "Imagine handling errors in asynchronous code in Node.js as having a magic first aid kit for when you scrape your knee during playtime. It catches the oopsie, puts on a bandage, and lets you keep running and jumping without stopping the fun.",
    syntax: "try/catch, .catch(), callback(err, data)",
  },
  {
    id: 121,
    question: "What is the purpose of the `util` module in Node.js?",
    answer: "Util has handy helpers. Like a tool belt.",
    example: "Convert a callback function to a promise:\nconst util = require('util');\nconst fs = require('fs');\nconst readFile = util.promisify(fs.readFile);\nreadFile('file.txt', 'utf8').then(data => console.log(data));\nInspect an object:\nconsole.log(util.inspect(myObject, { depth: null }));",
    realTimeExample: "Imagine the util module in Node.js as a toolbox full of magical gadgets that make your chores super easy, like a helper robot that turns old toys into new ones and shows you secret pictures, so you can play more and work less.",
    syntax: "const util = require('util'); util.inspect(), util.promisify()",
  },
  {
    id: 122,
    question: "How do you read and write files asynchronously in Node.js?",
    answer: "Use fs methods without waiting. Like quick notes.",
    example: "Read a file asynchronously:\nfs.readFile('file.txt', 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\nWrite to a file asynchronously:\nfs.writeFile('file.txt', 'Hello, Node.js!', (err) => {\n  if (err) throw err;\n  console.log('File saved!');\n});",
    realTimeExample: "Imagine reading and writing files asynchronously in Node.js as sending a quick text message to your friend and then going back to play, without waiting for a reply. You drop the note in the mailbox and keep having fun, knowing the message will get there when it's ready.",
    syntax: "fs.readFile(path, callback), fs.writeFile(path, data, callback)",
  },
  {
    id: 123,
    question: "What is the purpose of the `events` module in Node.js?",
    answer: "Events sends messages. Like shouting signals.",
    example: "Create an event emitter:\nconst EventEmitter = require('events');\nconst emitter = new EventEmitter();\nemitter.on('event', () => console.log('Event fired'));\nemitter.emit('event');",
    realTimeExample: "Imagine the events module in Node.js as a big town bell that rings to announce important news, like 'ice cream truck is here!' Objects shout events, and listeners tune in to hear the announcements, making sure everyone knows when to run out and get treats.",
    syntax: "const EventEmitter = require('events'); emitter.on(), emitter.emit()",
  },
  {
    id: 124,
    question: "How do you create a simple REST API with Express.js?",
    answer: "Set up routes for get, post. Like a menu for requests.",
    example: "1. Install Express:\n   npm install express\n2. Create a server:\n   const express = require('express');\n   const app = express();\n   app.get('/api/greet', (req, res) => {\n     res.json({ message: 'Hello, World!' });\n   });\n   app.listen(3000, () => {\n     console.log('Server running on port 3000');\n   });",
    realTimeExample: "Imagine creating a simple REST API with Express.js as opening a lemonade stand where you take orders for different drinks and serve them quickly. You set up the menu (routes) and the counter (handlers), so kids can ask for lemon or orange and get exactly what they want.",
    syntax: "app.get(path, handler), app.post(path, handler), app.listen(port)",
  },
  {
    id: 125,
    question: "What is the purpose of the `path` module in Node.js?",
    answer: "Path builds file paths. Like a map maker.",
    example: "Join paths:\nconst path = require('path');\nconst fullPath = path.join(__dirname, 'public', 'index.html');\nGet the basename:\nconst filename = path.basename('/path/to/file.txt'); // 'file.txt'",
    realTimeExample: "Imagine the path module in Node.js as a friendly map guide in a big park who knows all the secret trails and helps you find the best way to the swings or the slide, no matter which path you start from, making sure you never get lost in the woods.",
    syntax: "const path = require('path'); path.join(), path.resolve()",
  },
];

window.beginner = beginner;