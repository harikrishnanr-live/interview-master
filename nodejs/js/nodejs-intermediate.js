// Node.js Intermediate Level Q&A Data

let intermediate = [
  {
    id: 1,
    question: "What is REPL in Node.js?",
    answer: "REPL is like a fun playground where you can try Node.js code right away. It reads what you type, runs it, shows the answer, and lets you keep playing.",
    realTimeExample: "Imagine REPL as a magic chalkboard where you write code and it instantly shows you the results, like drawing and seeing colors appear right away.",
  },
  {
    id: 2,
    question: "How to import a module in Node.js?",
    answer: "Use require() like borrowing a toy from a friend. It brings in code boxes so you can use their fun stuff in your game.",
    realTimeExample: "Imagine importing a module as calling a friend over to share their toys, so you can build bigger castles together in your playroom.",
  },
  {
    id: 3,
    question: "What is package.json in Node.js?",
    answer: "Package.json is like a shopping list for your project. It tells what toys (code) you need and how to play with them.",
    realTimeExample: "Imagine package.json as a recipe book that lists all the ingredients and steps for baking cookies, so you know exactly what to get and how to make them yummy.",
  },
  {
    id: 4,
    question: "^(Caret) vs ~(Tilde) in package.json",
    answer: "Caret (^) lets you get small updates like new stickers. Tilde (~) only lets tiny fixes, like fixing a broken toy.",
    realTimeExample: "Imagine caret as getting bigger presents sometimes, tilde as just fixing what's already there, so your toy box stays mostly the same but better.",
  },
  {
    id: 5,
    question: "Session vs Cookies",
    answer: "Sessions are like secret notes the server keeps until you leave. Cookies are notes your computer remembers, like favorite colors.",
    realTimeExample: "Imagine sessions as a teacher's secret list of who behaved well today, cookies as stickers on your backpack that remind you of fun things.",
  },
  {
    id: 6,
    question: "response.write vs response.send",
    answer: "Response.write sends little bits of data, like sending puzzle pieces. Response.send sends the whole picture at once.",
    realTimeExample: "Imagine response.write as mailing letters one word at a time, response.send as sending the whole story in one envelope.",
  },
  {
    id: 7,
    question: "What is the error-first callback?",
    answer: "Error-first callback puts mistakes first in the list. If something goes wrong, it tells you right away.",
    realTimeExample: "Imagine error-first callback as a friend who says 'oops' first if they broke something, then tells you what happened, so you can fix it quickly.",
  },
  {
    id: 8,
    question: "What is the difference between setImmediate() and process.nextTick() methods?",
    answer: "Process.nextTick does things right after the current job. SetImmediate waits until all current jobs are done.",
    realTimeExample: "Imagine process.nextTick as jumping in line right after your turn, setImmediate as waiting until everyone else has gone first.",
  },
  {
    id: 9,
    question: "What is the child process in Nodejs?",
    answer: "Child process lets you run another program while your main one keeps going. Like having a helper do chores while you play.",
    realTimeExample: "Imagine child process as sending your little brother to get cookies from the kitchen while you keep building your Lego tower.",
  },
  {
    id: 10,
    question: "What is event-driven programming in Node.js?",
    answer: "Event-driven programming waits for things to happen and then reacts. Like playing tag: when tagged, you run.",
    realTimeExample: "Imagine event-driven programming as a game of Simon Says, where you only move when Simon tells you to, making everything happen at the right time.",
  },
  {
    id: 11,
    question: "How do you handle routing in Express.js?",
    answer: "Use app.get() and app.post() to make paths for requests. Like making signs to guide people to the right room.",
    syntax: "app.get('/path', (req, res) => { })",
    example: "app.get('/users/:id', (req, res) => { res.json({ id: req.params.id }); });",
    realTimeExample: "Imagine routing in Express.js as a treasure map that tells you exactly where to dig for gold based on the clues (URLs) you follow, leading you to the right spot every time.",
  },
  {
    id: 12,
    question: "What is middleware in Express.js?",
    answer: "Middleware is like a helper that checks and changes requests before they get to the main part. It can fix or add things.",
    syntax: "function middleware(req, res, next) { }",
    example: "app.use((req, res, next) => { console.log(req.method); next(); });",
    realTimeExample: "Imagine middleware in Express.js as a friendly elf who checks your backpack before you enter the castle, adding magic dust or fixing broken straps so you're ready for adventure.",
  },
  {
    id: 13,
    question: "How do you connect MongoDB with Node.js?",
    answer: "Use MongoDB tools to link your app to the database. Like connecting a game to save your scores.",
    syntax: "const { MongoClient } = require('mongodb'); MongoClient.connect(uri)",
    example: "const client = new MongoClient(uri); await client.connect(); const db = client.db('mydb');",
    realTimeExample: "Imagine connecting MongoDB with Node.js as plugging in your favorite video game console to the TV, so you can play and save all your high scores in one place.",
  },
  {
    id: 14,
    question: "What is Mongoose in Node.js?",
    answer: "Mongoose is a helper for MongoDB that makes data neat and checks if it's right. Like a teacher for your data.",
    syntax: "const mongoose = require('mongoose'); mongoose.connect(uri)",
    example: "const userSchema = new mongoose.Schema({ name: String, age: Number }); const User = mongoose.model('User', userSchema);",
    realTimeExample: "Imagine Mongoose as a magic blueprint that helps you build perfect Lego castles, making sure every brick fits and the castle is strong and follows the rules.",
  },
  {
    id: 15,
    question: "How do you implement authentication in Node.js?",
    answer: "Use passport to check who you are with passwords or tokens. Like showing ID to get into a club.",
    syntax: "npm install passport passport-local bcryptjs",
    example: "passport.use(new LocalStrategy((username, password, done) => { /* verify */ }));",
    realTimeExample: "Imagine authentication in Node.js as a secret password to enter your treehouse fort, where only friends with the right code can come in and play with your toys.",
  },
  {
    id: 16,
    question: "What is JWT and how do you use it?",
    answer: "JWT is a secret ticket that proves who you are. Use it to sign and check tokens safely.",
    syntax: "jwt.sign(payload, secret), jwt.verify(token, secret)",
    example: "const token = jwt.sign({ userId: 123 }, 'secret'); const decoded = jwt.verify(token, 'secret');",
    realTimeExample: "Imagine JWT as a magic ticket that lets you into the amusement park without waiting in line again, proving you're a real visitor with special powers.",
  },
  {
    id: 17,
    question: "How do you handle file uploads in Node.js?",
    answer: "Use multer to get files from forms. Like a helper that catches and saves pictures you send.",
    syntax: "npm install multer, const upload = multer({ dest: 'uploads/' })",
    example: "app.post('/upload', upload.single('file'), (req, res) => { console.log(req.file); });",
    realTimeExample: "Imagine file uploads in Node.js as sending drawings to your grandma through the mail, where a special helper sorts and saves them in her big album for safekeeping.",
  },
  {
    id: 18,
    question: "What is REST API in Node.js?",
    answer: "REST API is a way to talk to apps using web commands. Like a menu where you ask for food or change orders.",
    syntax: "app.get('/api/users'), app.post('/api/users'), app.put('/api/users/:id'), app.delete('/api/users/:id')",
    example: "app.get('/api/users', async (req, res) => { const users = await User.find(); res.json(users); });",
    realTimeExample: "Imagine REST API as a magical menu at a fairy tale restaurant where you can order new dishes, change recipes, or remove old ones with special words.",
  },
  {
    id: 19,
    question: "How do you implement pagination in Node.js APIs?",
    answer: "Use page and limit to show data in chunks. Like reading a book one page at a time.",
    syntax: "const page = req.query.page || 1; const limit = req.query.limit || 10;",
    example: "const offset = (page - 1) * limit; const users = await User.find().skip(offset).limit(limit);",
    realTimeExample: "Imagine pagination in Node.js APIs as turning pages in a big picture book, showing only a few drawings at a time so you don't get overwhelmed and can enjoy each one.",
  },
  {
    id: 20,
    question: "What is CORS and how to handle it?",
    answer: "CORS lets or stops requests from other websites. Use cors to allow friends from different places.",
    syntax: "npm install cors, app.use(cors())",
    example: "app.use(cors({ origin: 'http://localhost:3000', credentials: true }));",
    realTimeExample: "Imagine CORS as a playground gate that decides if kids from other neighborhoods can join your games, keeping things safe and fun for everyone invited.",
  },
  {
    id: 21,
    question: "How do you implement input validation in Node.js?",
    answer: "Use joi to check if data is good. Like tasting food before eating to make sure it's yummy.",
    syntax: "npm install joi, const schema = Joi.object({ name: Joi.string().required() })",
    example: "const { error } = schema.validate(req.body); if (error) return res.status(400).json({ error: error.details[0].message });",
    realTimeExample: "Imagine input validation in Node.js as a friendly taste-tester at the candy factory who checks every piece to make sure it's sweet and safe before packing it up.",
  },
  {
    id: 22,
    question: "What is socket.io in Node.js?",
    answer: "Socket.io lets you talk back and forth in real time. Like instant messages between friends.",
    syntax: "npm install socket.io, const io = require('socket.io')(server)",
    example: "io.on('connection', (socket) => { socket.on('message', (data) => { io.emit('message', data); }); });",
    realTimeExample: "Imagine socket.io as magical walkie-talkies that let you chat instantly with friends across the playground, sharing secrets and laughs without waiting for letters.",
  },
  {
    id: 23,
    question: "How do you handle errors in Express.js?",
    answer: "Use error middleware at the end to catch mistakes. Like a net that catches balls that miss.",
    syntax: "app.use((err, req, res, next) => { res.status(500).json({ error: err.message }); })",
    example: "app.use((err, req, res, next) => { console.error(err.stack); res.status(500).send('Something broke!'); });",
    realTimeExample: "Imagine error handling in Express.js as a big trampoline at the bottom of the slide that catches you if you fall, bouncing you back up with a smile and a 'try again'.",
  },
  {
    id: 24,
    question: "What is clustering in Node.js?",
    answer: "Clustering makes many helpers to use all computer parts. Like a team working together.",
    syntax: "const cluster = require('cluster'); cluster.fork()",
    example: "if (cluster.isMaster) { for (let i = 0; i < numCPUs; i++) cluster.fork(); } else { app.listen(3000); }",
    realTimeExample: "Imagine clustering in Node.js as a group of friends helping to build a giant sandcastle, where each friend works on a different part so it gets done faster and stronger.",
  },
  {
    id: 25,
    question: "How do you implement caching in Node.js?",
    answer: "Use memory or Redis to save data for quick use. Like keeping toys ready so you don't search.",
    syntax: "const cache = new Map(); cache.set(key, value)",
    example: "const cache = {}; function getUser(id) { if (cache[id]) return cache[id]; /* fetch from DB */ cache[id] = user; return user; }",
    realTimeExample: "Imagine caching in Node.js as keeping your favorite snacks in a special drawer next to your bed, so you can grab them instantly without going to the kitchen every time.",
  },
  {
    id: 26,
    question: "What is PM2 in Node.js?",
    answer: "PM2 manages apps in real life, keeps them running and watches them. Like a coach for your team.",
    syntax: "npm install -g pm2, pm2 start app.js",
    example: "pm2 start app.js --name 'my-app'; pm2 monit; pm2 logs; pm2 restart my-app;",
    realTimeExample: "Imagine PM2 as a friendly coach who makes sure your soccer team plays well, watches the game, and fixes problems so everyone has fun without stopping.",
  },
  {
    id: 27,
    question: "How do you implement logging in Node.js?",
    answer: "Use winston to write down what happens. Like keeping a diary of your app's day.",
    syntax: "npm install winston, winston.createLogger()",
    example: "const logger = winston.createLogger({ transports: [new winston.transports.File({ filename: 'app.log' })] }); logger.info('App started');",
    realTimeExample: "Imagine logging in Node.js as writing a daily diary about your adventures, noting every fun moment and any boo-boos so you can remember and learn from them.",
  },
  {
    id: 28,
    question: "What is GraphQL in Node.js?",
    answer: "GraphQL lets you ask for exactly what you want from data. Like picking toppings on pizza.",
    syntax: "npm install graphql express-graphql",
    example: "const schema = new GraphQLSchema({ query: new GraphQLObjectType({ name: 'Query', fields: { hello: { type: GraphQLString, resolve: () => 'Hello World' } } }) });",
    realTimeExample: "Imagine GraphQL as going to an ice cream parlor where you can choose exactly the scoops and sprinkles you want, getting just the perfect cone without extras.",
  },
  {
    id: 29,
    question: "How do you implement testing in Node.js?",
    answer: "Use Jest to check if code works. Like testing toys to make sure they don't break.",
    syntax: "npm install jest, describe(), it(), expect()",
    example: "describe('sum', () => { it('adds 1 + 2 to equal 3', () => { expect(sum(1, 2)).toBe(3); }); });",
    realTimeExample: "Imagine testing in Node.js as trying out your new bike before riding it far, making sure the wheels turn and brakes work so you have a safe adventure.",
  },
  {
    id: 30,
    question: "What is Docker and how to use it with Node.js?",
    answer: "Docker packs your app in a box with everything it needs. Like a lunchbox for your code.",
    syntax: "FROM node:16, WORKDIR /app, COPY package*.json ./, RUN npm install, COPY ., CMD ['node', 'app.js']",
    example: "Dockerfile content as above, then docker build -t my-app . && docker run -p 3000:3000 my-app",
    realTimeExample: "Imagine Docker as a magical lunchbox that keeps your sandwich, juice, and cookies fresh and together, so you can eat the same yummy meal anywhere you go.",
  },
  {
    id: 31,
    question: "How do you handle database migrations in Node.js?",
    answer: "Use knex to change database safely. Like updating your room's layout step by step.",
    syntax: "npx knex migrate:make create_users_table, npx knex migrate:latest",
    example: "exports.up = function(knex) { return knex.schema.createTable('users', table => { table.increments('id'); table.string('name'); }); };",
    realTimeExample: "Imagine database migrations as rearranging your bedroom furniture carefully, moving one piece at a time so everything fits perfectly without breaking anything.",
  },
  {
    id: 32,
    question: "What is the difference between SQL and NoSQL databases?",
    answer: "SQL is neat and organized, NoSQL is flexible. Like a tidy drawer vs a big toy box.",
    realTimeExample: "Imagine SQL databases as a neat bookshelf with labeled sections for books, while NoSQL is like a big bin where you can toss in toys, clothes, and games all together.",
  },
  {
    id: 33,
    question: "How do you implement rate limiting in Node.js?",
    answer: "Use rate limit to slow down too many requests. Like a speed bump for cars.",
    syntax: "npm install express-rate-limit, const limiter = rateLimit({ windowMs: 60000, max: 100 })",
    example: "app.use(limiter); // Applies to all routes",
    realTimeExample: "Imagine rate limiting as a friendly traffic cop who says 'slow down' when too many cars want to go at once, keeping the road safe and fair for everyone.",
  },
  {
    id: 34,
    question: "What is the event loop in Node.js?",
    answer: "Event loop waits for jobs and does them. Like a game turn-taker.",
    realTimeExample: "Imagine the event loop as a merry-go-round that spins kids (tasks) one by one, making sure everyone gets a ride without anyone waiting too long or getting stuck.",
  },
  {
    id: 35,
    question: "How do you implement background jobs in Node.js?",
    answer: "Use Bull for jobs that run later. Like chores after dinner.",
    syntax: "npm install bull, const queue = new Queue('my-queue')",
    example: "queue.add({ email: 'user@example.com', message: 'Welcome!' }); // Process emails in background",
    realTimeExample: "Imagine background jobs as doing your homework after playing, so you can enjoy games now and finish work later without stopping the fun.",
  },
  {
    id: 36,
    question: "What is the difference between spawn, exec, and fork in child_process?",
    answer: "Spawn streams, exec buffers, fork clones Node.js. Like hose vs bucket vs twin.",
    syntax: "child_process.spawn(), child_process.exec(), child_process.fork()",
    example: "const { spawn } = require('child_process'); const child = spawn('ls', ['-l']);",
    realTimeExample: "Imagine spawn as a garden hose spraying water steadily, exec as filling a bucket all at once, and fork as making a copy of yourself to help with chores.",
  },
  {
    id: 37,
    question: "How do you implement WebSockets in Node.js?",
    answer: "Use ws for instant talk. Like a phone that stays connected.",
    syntax: "npm install ws, const WebSocket = require('ws')",
    example: "const wss = new WebSocket.Server({ port: 8080 }); wss.on('connection', ws => { ws.send('Hello!'); });",
    realTimeExample: "Imagine WebSockets as a magical phone line that stays open all day, so you and your friend can chat instantly without calling each time.",
  },
  {
    id: 38,
    question: "What is the difference between process.nextTick() and setImmediate()?",
    answer: "NextTick does now, setImmediate after. Like urgent vs soon.",
    syntax: "process.nextTick(callback), setImmediate(callback)",
    example: "process.nextTick(() => console.log('nextTick')); setImmediate(() => console.log('immediate'));",
    realTimeExample: "Imagine process.nextTick as shouting 'do this right now' for something super important, while setImmediate is saying 'do this after your current game' for later tasks.",
  },
  {
    id: 39,
    question: "How do you implement API versioning in Node.js?",
    answer: "Use different paths for versions. Like v1 and v2 rooms.",
    syntax: "app.use('/api/v1', v1Routes), app.use('/api/v2', v2Routes)",
    example: "const v1Routes = require('./routes/v1'); const v2Routes = require('./routes/v2');",
    realTimeExample: "Imagine API versioning as having different levels in a video game, where level 1 has old rules and level 2 has new ones, so players can choose what they like.",
  },
  {
    id: 40,
    question: "What is the difference between synchronous and asynchronous programming?",
    answer: "Synchronous waits for each thing, asynchronous does many at once. Like waiting vs multitasking.",
    realTimeExample: "Imagine synchronous programming as standing in line for ice cream one by one, while asynchronous is ordering your cone and playing games while waiting for it to be ready.",
  },
  {
    id: 41,
    question: "How do you handle database transactions in Node.js?",
    answer: "Use begin, commit, rollback for safe changes. Like all or nothing deals.",
    syntax: "connection.beginTransaction(), connection.commit(), connection.rollback()",
    example: "connection.beginTransaction(); try { await connection.query('UPDATE...'); await connection.query('INSERT...'); await connection.commit(); } catch { await connection.rollback(); }",
    realTimeExample: "Imagine database transactions as trading stickers with a friend: either you both swap all at once, or if something goes wrong, you both keep what you had.",
  },
  {
    id: 42,
    question: "What is the difference between PUT and PATCH?",
    answer: "PUT changes all, PATCH changes parts. Like full repaint vs spot fix.",
    syntax: "app.put('/resource/:id'), app.patch('/resource/:id')",
    example: "PUT /users/1 replaces entire user object. PATCH /users/1 updates only specified fields.",
    realTimeExample: "Imagine PUT as repainting your whole room with new colors everywhere, while PATCH is just touching up one scuff mark on the wall without changing anything else.",
  },
  {
    id: 43,
    question: "How do you implement password hashing in Node.js?",
    answer: "Use bcrypt to mix up passwords safely. Like scrambling codes.",
    syntax: "npm install bcrypt, bcrypt.hash(), bcrypt.compare()",
    example: "const hashedPassword = await bcrypt.hash(password, 10); const isValid = await bcrypt.compare(password, hashedPassword);",
    realTimeExample: "Imagine password hashing as turning your secret code into a jumbled puzzle that only you can solve, keeping bad guys from guessing your passwords even if they peek.",
  },
  {
    id: 44,
    question: "What is the difference between res.send() and res.json()?",
    answer: "Res.send sends anything, res.json sends data neatly. Like general vs specific mail.",
    syntax: "res.send(data), res.json(data)",
    example: "res.send('<h1>Hello</h1>'); // Sends HTML, res.json({ message: 'Hello' }); // Sends JSON",
    realTimeExample: "Imagine res.send as sending a mixed bag of toys and notes, while res.json is carefully packing data in a special box labeled 'data' for easy unpacking.",
  },
  {
    id: 45,
    question: "How do you implement session-based authentication?",
    answer: "Use sessions to remember users. Like a club stamp.",
    syntax: "npm install express-session, app.use(session({ secret: 'key' }))",
    example: "req.session.userId = user.id; // After login, if (req.session.userId) { /* authenticated */ }",
    realTimeExample: "Imagine session-based authentication as getting a special stamp on your hand at the fair, so you can go on rides all day without showing your ticket again.",
  },
  {
    id: 46,
    question: "What is the difference between middleware and routes?",
    answer: "Middleware checks first, routes handle specific paths. Like guards vs doors.",
    syntax: "app.use(middleware), app.get('/path', handler)",
    example: "app.use(express.json()); // Middleware, app.get('/users', getUsers); // Route",
    realTimeExample: "Imagine middleware as the ticket checker at the zoo entrance who stamps your hand, while routes are the specific animal exhibits you visit after getting in.",
  },
  {
    id: 47,
    question: "How do you implement file streaming in Node.js?",
    answer: "Use streams to send files bit by bit. Like a conveyor belt.",
    syntax: "const readStream = fs.createReadStream('file.txt'); const writeStream = fs.createWriteStream('output.txt')",
    example: "readStream.pipe(writeStream); // Streams data from read to write",
    realTimeExample: "Imagine file streaming as a conveyor belt in a factory that moves candies one by one instead of carrying the whole box, so nothing gets too heavy or breaks.",
  },
  {
    id: 48,
    question: "What is the difference between exports and module.exports?",
    answer: "Exports adds to box, module.exports replaces box. Like adding vs swapping.",
    syntax: "exports.function = function() {}, module.exports = { function }",
    example: "exports.add = (a, b) => a + b; // Multiple exports, module.exports = class Calculator {}; // Single export",
    realTimeExample: "Imagine exports as putting stickers on your backpack one by one, while module.exports is swapping the whole backpack for a new one with different stuff inside.",
  },
  {
    id: 49,
    question: "How do you implement API documentation in Node.js?",
    answer: "Use Swagger to make docs. Like a map for your API.",
    syntax: "npm install swagger-jsdoc swagger-ui-express",
    example: "const swaggerUi = require('swagger-ui-express'); app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));",
    realTimeExample: "Imagine API documentation as a colorful map of a treasure island that shows explorers exactly where to find gold and how to get there safely.",
  },
  {
    id: 50,
    question: "What is the difference between res.end() and res.send()?",
    answer: "Res.end stops, res.send sends and stops. Like hang up vs say bye.",
    syntax: "res.end(), res.send(data)",
    example: "res.status(404).end(); // Just end with 404, res.send('Hello'); // Send data and end",
    realTimeExample: "Imagine res.end as slamming the door shut without a word, while res.send is waving goodbye and closing the door gently after saying 'see you later'.",
  },
  {
    id: 51,
    question: "How do you implement role-based access control (RBAC) in Node.js?",
    answer: "Check roles to allow access. Like VIP rooms for special people.",
    syntax: "function checkRole(role) { return (req, res, next) => { if (req.user.role === role) return next(); res.status(403).send('Access denied'); } }",
    example: "Define RBAC middleware:\nconst checkAdmin = checkRole('admin');\napp.get('/admin', checkAdmin, (req, res) => {\n  res.send('Admin Dashboard');\n});",
    realTimeExample: "Imagine RBAC as a castle with secret rooms where only knights with special badges can enter, keeping the treasure safe from regular visitors.",
  },
  {
    id: 52,
    question: "How do you implement rate limiting for APIs in Node.js?",
    answer: "Limit requests per time. Like candy limits per day.",
    syntax: "npm install express-rate-limit, const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 100 })",
    example: "Apply rate limiting:\napp.use(limiter);\napp.get('/api/data', (req, res) => {\n  res.json({ data: 'Limited access' });\n});",
    realTimeExample: "Imagine rate limiting as a friendly traffic cop who says 'slow down' when too many cars want to go at once, keeping the road safe and fair for everyone.",
  },
  {
    id: 53,
    question: "How do you implement WebSocket communication in Node.js?",
    answer: "Use ws for instant talk. Like a phone that stays connected.",
    syntax: "npm install ws, const WebSocket = require('ws')",
    example: "Create a WebSocket server:\nconst wss = new WebSocket.Server({ port: 8080 });\nwss.on('connection', (ws) => {\n  ws.on('message', (message) => {\n    console.log('Received:', message);\n    ws.send(`Echo: ${message}`);\n  });\n});",
    realTimeExample: "Imagine WebSocket communication as a magical phone line that stays open all day, so you and your friend can chat instantly without calling each time.",
  },
  {
    id: 54,
    question: "How do you implement API versioning in Node.js?",
    answer: "Use different paths for versions. Like v1 and v2 rooms.",
    syntax: "app.use('/api/v1', v1Routes), app.use('/api/v2', v2Routes)",
    example: "Version your API:\nconst v1Routes = require('./routes/v1');\nconst v2Routes = require('./routes/v2');\napp.use('/api/v1/users', v1Routes);\napp.use('/api/v2/users', v2Routes);",
    realTimeExample: "Imagine API versioning as having different levels in a video game, where level 1 has old rules and level 2 has new ones, so players can choose what they like.",
  },
  {
    id: 55,
    question: "How do you implement database connection pooling in Node.js?",
    answer: "Reuse connections to save time. Like sharing bikes.",
    syntax: "const pool = mysql.createPool({ host: 'localhost', user: 'root', database: 'test', connectionLimit: 10 })",
    example: "Create a connection pool:\nconst pool = mysql.createPool({\n  host: 'localhost',\n  user: 'root',\n  database: 'test',\n  connectionLimit: 10\n});\npool.query('SELECT * FROM users', (err, results) => {\n  if (err) throw err;\n  console.log(results);\n});",
    realTimeExample: "Imagine database connection pooling as a bike-sharing station where you grab a bike when you need it and return it when done, so everyone can use them quickly without waiting.",
  },
  {
    id: 56,
    question: "How do you implement request validation in Node.js?",
    answer: "Check if data is good before using. Like tasting food first.",
    syntax: "npm install joi, const schema = Joi.object({ name: Joi.string().required() })",
    example: "Validate request data:\nconst { error } = schema.validate(req.body);\nif (error) return res.status(400).json({ error: error.details[0].message });",
    realTimeExample: "Imagine request validation as a friendly taste-tester at the candy factory who checks every piece to make sure it's sweet and safe before packing it up.",
  },
  {
    id: 57,
    question: "How do you implement file compression in Node.js?",
    answer: "Make files smaller to send fast. Like squeezing a sponge.",
    syntax: "npm install compression, app.use(compression())",
    example: "Enable compression:\napp.use(compression());\napp.get('/download', (req, res) => {\n  res.download('large-file.zip');\n});",
    realTimeExample: "Imagine file compression as squeezing a big sponge into a tiny ball, so it fits in your pocket and you can carry it easily without it being heavy.",
  },
  {
    id: 58,
    question: "How do you implement request logging in Node.js?",
    answer: "Write down what requests come in. Like a diary for your app.",
    syntax: "npm install morgan, app.use(morgan('combined'))",
    example: "Log HTTP requests:\napp.use(morgan('tiny'));\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});",
    realTimeExample: "Imagine request logging as writing a daily diary about who came to your house and what they did, so you can remember and check if everything was okay.",
  },
  {
    id: 59,
    question: "How do you implement response caching in Node.js?",
    answer: "Save answers to reuse. Like keeping snacks ready.",
    syntax: "npm install apicache, const cache = apicache.middleware",
    example: "Cache API responses:\napp.use(cache('5 minutes'));\napp.get('/api/data', (req, res) => {\n  res.json({ data: 'Cached response' });\n});",
    realTimeExample: "Imagine response caching as keeping your favorite snacks in a special drawer next to your bed, so you can grab them instantly without going to the kitchen every time.",
  },
  {
    id: 60,
    question: "How do you implement health checks in Node.js?",
    answer: "Check if app is healthy. Like a doctor visit.",
    syntax: "app.get('/health', (req, res) => { res.json({ status: 'OK', database: 'connected' }) })",
    example: "Implement a health check:\napp.get('/health', async (req, res) => {\n  const dbStatus = await checkDatabaseConnection();\n  res.json({ status: 'OK', database: dbStatus });\n});",
    realTimeExample: "Imagine health checks as a friendly doctor who visits your toy box every day to make sure all your toys are working and not broken, so you can keep playing happily.",
  },
  {
    id: 61,
    question: "How do you implement request timeouts in Node.js?",
    answer: "Stop slow requests. Like a game timer.",
    syntax: "npm install connect-timeout, app.use(timeout('10s'))",
    example: "Set a request timeout:\napp.use(timeout('10s'));\napp.use(haltOnTimedout);\napp.get('/slow', (req, res) => {\n  setTimeout(() => res.send('Done'), 15000);\n});",
    realTimeExample: "Imagine request timeouts as a friendly timer in a game that says 'time's up' if you take too long, so the next player can go and everyone has fun.",
  },
  {
    id: 62,
    question: "How do you implement API key authentication in Node.js?",
    answer: "Check for a special key. Like a secret password.",
    syntax: "function checkApiKey(req, res, next) { const apiKey = req.headers['x-api-key']; if (apiKey && apiKey === 'valid-key') return next(); res.status(401).send('Unauthorized'); }",
    example: "Protect routes with API key:\napp.use(checkApiKey);\napp.get('/api/data', (req, res) => {\n  res.json({ data: 'Protected data' });\n});",
    realTimeExample: "Imagine API key authentication as a magic key that opens a special door to your secret clubhouse, where only friends with the right key can come in and play.",
  },
  {
    id: 63,
    question: "How do you implement request throttling in Node.js?",
    answer: "Slow down too many requests. Like a speed limit.",
    syntax: "npm install express-rate-limit, const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 100 })",
    example: "Apply request throttling:\napp.use(limiter);\napp.get('/api/data', (req, res) => {\n  res.json({ data: 'Throttled access' });\n});",
    realTimeExample: "Imagine request throttling as a friendly speed bump on your bike path that makes you slow down a bit, so you don't crash and everyone can ride safely together.",
  },
  {
    id: 64,
    question: "How do you implement request body parsing in Node.js?",
    answer: "Read data from requests. Like opening a letter.",
    syntax: "npm install body-parser, app.use(bodyParser.json())",
    example: "Parse JSON request bodies:\napp.use(express.json());\napp.post('/api/data', (req, res) => {\n  console.log(req.body);\n  res.json({ received: true });\n});",
    realTimeExample: "Imagine request body parsing as carefully opening a birthday present to see what's inside, so you can play with the toys and enjoy the surprise.",
  },
  {
    id: 65,
    question: "How do you implement request parameter validation in Node.js?",
    answer: "Check URL parts are good. Like checking tickets.",
    syntax: "npm install joi, const schema = Joi.object({ id: Joi.number().required() })",
    example: "Validate request parameters:\nconst { error } = schema.validate(req.params);\nif (error) return res.status(400).json({ error: error.details[0].message });",
    realTimeExample: "Imagine request parameter validation as a friendly ticket checker at the amusement park who makes sure your ticket is real and not torn before letting you on the ride.",
  },
  {
    id: 66,
    question: "How do you implement request header validation in Node.js?",
    answer: "Check headers are right. Like checking IDs.",
    syntax: "function checkHeaders(req, res, next) { if (req.headers['content-type'] === 'application/json') return next(); res.status(400).send('Invalid headers'); }",
    example: "Validate request headers:\napp.use(checkHeaders);\napp.post('/api/data', (req, res) => {\n  res.json({ received: true });\n});",
    realTimeExample: "Imagine request header validation as a polite doorman who checks your name tag before letting you into the party, making sure you're on the guest list.",
  },
  {
    id: 67,
    question: "How do you implement request query validation in Node.js?",
    answer: "Check query parts are good. Like filtering questions.",
    syntax: "npm install joi, const schema = Joi.object({ limit: Joi.number().min(1).max(100) })",
    example: "Validate request queries:\nconst { error } = schema.validate(req.query);\nif (error) return res.status(400).json({ error: error.details[0].message });",
    realTimeExample: "Imagine request query validation as a smart filter on your water hose that only lets clean water through, stopping dirt and making sure everything is just right.",
  },
  {
    id: 68,
    question: "How do you implement request compression in Node.js?",
    answer: "Handle squished data. Like unpacking a balloon.",
    syntax: "npm install body-parser, app.use(bodyParser.json({ limit: '10mb' }))",
    example: "Handle compressed requests:\napp.use(express.json({ limit: '10mb' }));\napp.post('/api/data', (req, res) => {\n  console.log(req.body);\n  res.json({ received: true });\n});",
    realTimeExample: "Imagine request compression as carefully blowing up a deflated balloon, making it big and fun again so you can play with it without it being flat.",
  },
  {
    id: 69,
    question: "How do you implement request decompression in Node.js?",
    answer: "Unpack squished data. Like blowing up a balloon.",
    syntax: "npm install compression, app.use(compression())",
    example: "Handle decompressed requests:\napp.use(express.json());\napp.post('/api/data', (req, res) => {\n  console.log(req.body);\n  res.json({ received: true });\n});",
    realTimeExample: "Imagine request decompression as blowing up a flat balloon with air, making it round and bouncy again so you can play catch with it happily.",
  },
  {
    id: 70,
    question: "How do you implement request logging middleware in Node.js?",
    answer: "Record requests. Like a camera watching.",
    syntax: "npm install morgan, app.use(morgan('combined'))",
    example: "Log incoming requests:\napp.use(morgan('dev'));\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});",
    realTimeExample: "Imagine request logging middleware as a friendly video camera that watches who comes to your door and what they bring, so you can remember and check later.",
  },
  {
    id: 71,
    question: "How do you implement request ID tracking in Node.js?",
    answer: "Give each request a special number. Like a tracking code.",
    syntax: "app.use((req, res, next) => { req.id = uuid.v4(); next(); })",
    example: "Track request IDs:\napp.use((req, res, next) => {\n  req.id = uuid.v4();\n  console.log(`Request ${req.id} received`);\n  next();\n});",
    realTimeExample: "Imagine request ID tracking as putting a special sticker with a unique number on each letter you send, so you can follow where it goes and make sure it arrives safely.",
  },
  {
    id: 72,
    question: "How do you implement request timing in Node.js?",
    answer: "Time how long requests take. Like a stopwatch.",
    syntax: "app.use((req, res, next) => { req.startTime = Date.now(); next(); })",
    example: "Measure request timing:\napp.use((req, res, next) => {\n  req.startTime = Date.now();\n  res.on('finish', () => {\n    const duration = Date.now() - req.startTime;\n    console.log(`Request took ${duration}ms`);\n  });\n  next();\n});",
    realTimeExample: "Imagine request timing as using a fun stopwatch during a race, timing how long it takes for each friend to run around the track so you can cheer the fastest.",
  },
  {
    id: 73,
    question: "How do you implement request size limiting in Node.js?",
    answer: "Limit how big requests can be. Like a weight limit.",
    syntax: "app.use(express.json({ limit: '10kb' }))",
    example: "Limit request size:\napp.use(express.json({ limit: '10kb' }));\napp.post('/api/data', (req, res) => {\n  res.json({ received: true });\n});",
    realTimeExample: "Imagine request size limiting as a sign at the playground saying 'only kids under 50 pounds can use this slide', keeping everything safe and fun without breaking.",
  },
  {
    id: 74,
    question: "How do you implement request method overriding in Node.js?",
    answer: "Use other methods in forms. Like pretending.",
    syntax: "npm install method-override, app.use(methodOverride('_method'))",
    example: "Override HTTP methods:\napp.use(methodOverride('_method'));\napp.put('/api/data', (req, res) => {\n  res.json({ updated: true });\n});",
    realTimeExample: "Imagine request method overriding as pretending to be a superhero in a game, using a special cape (middleware) to change your powers even when the game says you can't.",
  },
  {
    id: 75,
    question: "How do you implement request content negotiation in Node.js?",
    answer: "Give responses in preferred format. Like choosing language.",
    syntax: "req.accepts(type), res.format({ 'application/json': () => { res.json({ data: 'JSON' }) })",
    example: "Negotiate response format:\napp.get('/api/data', (req, res) => {\n  res.format({\n    'application/json': () => res.json({ data: 'JSON' }),\n    'text/plain': () => res.send('Plain Text')\n  });\n});",
    realTimeExample: "Imagine request content negotiation as a friendly waiter who speaks your language, giving you the menu in English or Spanish depending on what you prefer.",
  },
];

// Make data available globally
window.intermediate = intermediate;
