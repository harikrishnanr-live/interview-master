[
  {
    "question": "What is a variable in JavaScript?",
    "answer": "A variable is a container for storing data values. Declared with var, let, or const."
  },
  {
    "question": "How do you declare a variable in JavaScript?",
    "answer": "Using var, let, or const followed by the variable name."
  },
  {
    "question": "What is the difference between var, let, and const?",
    "answer": "var is function scoped and can be re-declared; let and const are block scoped, let can be updated, const cannot."
  },
  {
    "question": "What data types are supported in JavaScript?",
    "answer": "Number, String, Boolean, Object, Null, Undefined, Symbol, and BigInt."
  },
  {
    "question": "What is a string in JavaScript?",
    "answer": "A sequence of characters enclosed in single, double quotes, or backticks."
  },
  {
    "question": "How do you create a multi-line string?",
    "answer": "Using template literals with backticks (`) or concatenation with \\n."
  },
  {
    "question": "What is a function in JavaScript?",
    "answer": "A reusable block of code designed to perform a particular task."
  },
  {
    "question": "How do you declare a function?",
    "answer": "Using function keyword: function name() { // code } or arrow functions."
  },
  {
    "question": "What are function parameters and arguments?",
    "answer": "Parameters are named variables in a function definition; arguments are actual values passed to the function."
  },
  {
    "question": "What is the return statement?",
    "answer": "It specifies the value a function returns to the caller."
  },
  {
    "question": "What is an object in JavaScript?",
    "answer": "An object is a collection of key-value pairs, where keys are strings (or Symbols) and values can be any type."
  },
  {
    "question": "How do you create an object?",
    "answer": "Using object literal syntax {} or new Object()."
  },
  {
    "question": "How do you access object properties?",
    "answer": "Using dot notation (obj.key) or bracket notation (obj['key'])."
  },
  {
    "question": "How do you add a property to an object?",
    "answer": "Assign a value to a new key: obj.newProp = value."
  },
  {
    "question": "What is an array?",
    "answer": "An ordered list of values indexed from 0."
  },
  {
    "question": "How do you create an array?",
    "answer": "Using square brackets: let arr = [1, 2, 3]."
  },
  {
    "question": "How do you access elements in an array?",
    "answer": "Using indices: arr[0], arr[1], etc."
  },
  {
    "question": "How do you find the length of an array?",
    "answer": "Using the length property: arr.length."
  },
  {
    "question": "What is a loop?",
    "answer": "A control structure that repeats a block of code while a condition is true."
  },
  {
    "question": "Name different types of loops in JavaScript.",
    "answer": "for, while, do-while, for...in, and for...of loops."
  },
  {
    "question": "What is the difference between for...in and for...of loops?",
    "answer": "for...in iterates over object keys; for...of iterates over iterable values."
  },
  {
    "question": "What are conditional statements?",
    "answer": "Statements that perform different actions based on conditions (if, else if, else, switch)."
  },
  {
    "question": "How do you write an if statement?",
    "answer": "if (condition) { // code }"
  },
  {
    "question": "What is the switch statement?",
    "answer": "A control statement that executes code based on matching a value to case clauses."
  },
  {
    "question": "What are truthy and falsy values?",
    "answer": "Truthy values evaluate to true in a boolean context; falsy values (like 0, '', null, undefined, NaN, false) evaluate to false."
  },
  {
    "question": "What is NaN in JavaScript?",
    "answer": "NaN stands for 'Not-a-Number', representing a value that is not a legal number."
  },
  {
    "question": "How do you check if a value is NaN?",
    "answer": "Using the built-in isNaN() function or Number.isNaN() for more accurate checking."
  },
  {
    "question": "What is the difference between == and ===?",
    "answer": "== compares values after type coercion; === compares both value and type (strict equality)."
  },
  {
    "question": "What is type coercion?",
    "answer": "JavaScript automatically converts values from one type to another when performing operations."
  },
  {
    "question": "What is a callback function?",
    "answer": "A function passed into another function as an argument to be executed later."
  },
  {
    "question": "What is event bubbling?",
    "answer": "Event propagation where the event starts from the target element and bubbles up to ancestor elements."
  },
  {
    "question": "What is event capturing?",
    "answer": "Event propagation phase where the event starts from the root and goes down to the target element."
  },
  {
    "question": "How do you stop event propagation?",
    "answer": "By calling event.stopPropagation() or event.stopImmediatePropagation()."
  },
  {
    "question": "What is a promise?",
    "answer": "An object representing eventual completion or failure of an asynchronous operation."
  },
  {
    "question": "What are the states of a promise?",
    "answer": "Pending, Fulfilled (resolved), and Rejected."
  },
  {
    "question": "How do you create a promise?",
    "answer": "Using new Promise((resolve, reject) => { /* async code */ })."
  },
  {
    "question": "What is async/await?",
    "answer": "Syntax for writing asynchronous code that looks synchronous, built on promises."
  },
  {
    "question": "What is a closure?",
    "answer": "A function with access to its own scope, outer function’s scope, and the global scope."
  },
  {
    "question": "What is the difference between local and global scope?",
    "answer": "Local scope is inside functions or blocks; global scope is accessible everywhere."
  },
  {
    "question": "What is lexical scoping?",
    "answer": "Variables are resolved by their physical location in the code at the time of definition."
  },
  {
    "question": "What is the this keyword?",
    "answer": "Refers to the object that is executing the current function."
  },
  {
    "question": "How does 'this' behave in arrow functions?",
    "answer": "Arrow functions don’t have their own this; they inherit it from the surrounding scope."
  },
  {
    "question": "What is prototype inheritance?",
    "answer": "Objects inherit properties and methods from their prototype objects."
  },
  {
    "question": "What is the difference between call(), apply(), and bind()?",
    "answer": "call() and apply() invoke functions with a given this; apply() takes args as array, call() as list; bind() returns a new function with bound this."
  },
  {
    "question": "What is the difference between an expression and a statement?",
    "answer": "An expression produces a value; a statement performs an action."
  },
  {
    "question": "What is NaN compared to undefined?",
    "answer": "NaN is a number representing 'Not a Number'; undefined means a variable is declared but not assigned."
  },
  {
    "question": "What is the difference between null and undefined?",
    "answer": "null is an intentional absence of value; undefined means variable declared but not assigned."
  },
  {
    "question": "How can you convert a string to a number?",
    "answer": "Using Number(), parseInt(), parseFloat(), or unary plus (+) operator."
  },
  {
    "question": "What is event delegation?",
    "answer": "Attaching a single event listener to a parent element to manage events on child elements."
  },
  {
    "question": "What is a template literal?",
    "answer": "String literals allowing embedded expressions using backticks and ${}."
  },
  {
    "question": "What is destructuring assignment?",
    "answer": "Extracting values from arrays or objects into variables."
  },
  {
    "question": "What are default parameters?",
    "answer": "Function parameters with default values if no argument is provided."
  },
  {
    "question": "What is the spread operator?",
    "answer": "Expands iterable (like arrays) into individual elements."
  },
  {
    "question": "What is the rest parameter?",
    "answer": "Collects multiple elements into an array parameter."
  },
  {
    "question": "How do you create a class in JavaScript?",
    "answer": "Using the class keyword: class MyClass { constructor() { } method() { } }"
  },
  {
    "question": "What is a constructor?",
    "answer": "A special method for creating and initializing an object created with a class."
  },
  {
    "question": "What is inheritance in classes?",
    "answer": "A class can extend another class to inherit properties and methods."
  },
  {
    "question": "What is a module in JavaScript?",
    "answer": "Reusable pieces of code that can be exported and imported using import/export syntax."
  },
  {
    "question": "What is the difference between synchronous and asynchronous code?",
    "answer": "Synchronous code runs sequentially; asynchronous code runs without blocking the main thread."
  },
  {
    "question": "How do you handle errors in JavaScript?",
    "answer": "Using try...catch blocks or handling rejected promises."
  },
  {
    "question": "What is the use of 'use strict'?",
    "answer": "Enables strict mode which helps catch errors and disables some unsafe features."
  },
  {
    "question": "What is the difference between function declaration and function expression?",
    "answer": "Function declarations are hoisted; function expressions are not."
  },
  {
    "question": "What is hoisting?",
    "answer": "JavaScript’s behavior of moving declarations to the top of their scope before execution."
  },
  {
    "question": "What is an Immediately Invoked Function Expression (IIFE)?",
    "answer": "A function that runs as soon as it is defined."
  },
  {
    "question": "What is the difference between null, undefined, and empty string?",
    "answer": "null is an assigned absence, undefined means uninitialized, empty string is a string with no characters."
  },
  {
    "question": "How do you check if a variable is an array?",
    "answer": "Using Array.isArray(variable)."
  },
  {
    "question": "What are the ways to clone an object?",
    "answer": "Using Object.assign(), spread operator, or JSON.parse(JSON.stringify(obj)) for deep clone."
  },
  {
    "question": "What is the difference between shallow copy and deep copy?",
    "answer": "Shallow copy copies top-level properties; deep copy copies nested objects."
  },
  {
    "question": "What is a Symbol?",
    "answer": "A unique and immutable primitive value used as object property keys."
  },
  {
    "question": "What is a generator function?",
    "answer": "A function that can be paused and resumed using yield."
  },
  {
    "question": "What is the event loop in JavaScript?",
    "answer": "A mechanism that handles asynchronous callbacks by queuing and executing tasks."
  },
  {
    "question": "What is the difference between microtasks and macrotasks?",
    "answer": "Microtasks (e.g. promises) run before macrotasks (e.g. setTimeout) in the event loop."
  },
  {
    "question": "How do you convert an object to JSON?",
    "answer": "Using JSON.stringify()."
  },
  {
    "question": "How do you parse JSON to an object?",
    "answer": "Using JSON.parse()."
  },
  {
    "question": "What is debouncing?",
    "answer": "Delaying function execution until after a certain amount of time has passed since last call."
  },
  {
    "question": "What is throttling?",
    "answer": "Limiting function execution to once every fixed time interval."
  },
  {
    "question": "What are higher-order functions?",
    "answer": "Functions that take other functions as arguments or return functions."
  },
  {
    "question": "What is the difference between map() and forEach()?",
    "answer": "map() returns a new array; forEach() returns undefined."
  },
  {
    "question": "What is the filter() method?",
    "answer": "Returns a new array with elements that pass a test implemented by a function."
  },
  {
    "question": "What is reduce() method?",
    "answer": "Executes a reducer function on each element to reduce the array to a single value."
  },
  {
    "question": "What is the difference between splice() and slice()?",
    "answer": "splice() modifies the original array; slice() returns a new array."
  },
  {
    "question": "What is JSONP?",
    "answer": "A technique to overcome cross-origin restrictions by using script tags."
  },
  {
    "question": "What is a service worker?",
    "answer": "A script that runs in the background to manage caching and offline experience."
  },
  {
    "question": "What is strict equality?",
    "answer": "Checking both type and value equality using === operator."
  },
  {
    "question": "What is the difference between a primitive and an object?",
    "answer": "Primitives are immutable and hold single values; objects are collections of properties."
  },
  {
    "question": "What is the difference between undefined and undeclared?",
    "answer": "undefined means declared but no value; undeclared means not declared at all."
  },
  {
    "question": "What is a weak reference in JavaScript?",
    "answer": "References that do not prevent garbage collection, e.g., WeakMap and WeakSet."
  },
  {
    "question": "What is the difference between WeakMap and Map?",
    "answer": "WeakMap keys must be objects and are weakly referenced; Map keys can be any type."
  },
  {
    "question": "What is the use of Object.freeze()?",
    "answer": "Prevents modification of existing properties and addition of new ones on an object."
  },
  {
    "question": "What are modules?",
    "answer": "Reusable pieces of code encapsulated in files that export and import functionality."
  },
  {
    "question": "What are the benefits of using ES6 modules?",
    "answer": "Encapsulation, reuse, better dependency management, and cleaner syntax."
  },
  {
    "question": "What is the difference between synchronous and asynchronous functions?",
    "answer": "Synchronous functions block the main thread; asynchronous functions do not."
  },
  {
    "question": "What is a promise chain?",
    "answer": "Chaining multiple then() calls to handle sequential asynchronous operations."
  }
]
