[
  {
    "question": "What is TypeScript?",
    "answer": "TypeScript is a statically typed superset of JavaScript that adds optional types to JavaScript. It compiles down to plain JavaScript and can run anywhere JavaScript runs."
  },
  {
    "question": "What are the advantages of using TypeScript over JavaScript?",
    "answer": "Type safety, better tooling (autocomplete, linting), supports modern JavaScript features, improved refactoring, and better error checking during development."
  },
  {
    "question": "How do you define a variable in TypeScript?",
    "answer": "You define a variable with let, const, or var and specify the type if needed."
  },
  {
    "question": "What are types in TypeScript?",
    "answer": "Types describe the shape or structure of data, such as string, number, boolean, and object. They are used to define variables, function parameters, and return types."
  },
  {
    "question": "What is the difference between any and unknown in TypeScript?",
    "answer": "any allows any type and bypasses type checking. unknown is safer and forces the developer to check the type before using it."
  },
  {
    "question": "What is a tuple in TypeScript?",
    "answer": "A tuple is an ordered collection of elements of different types. In TypeScript, a tuple is a special type of array where the number of elements and their types are fixed. Example: let person: [string, number] = [\"Alice\", 25];"
  },
  {
    "question": "What are interfaces in TypeScript?",
    "answer": "Interfaces define the structure of an object, including its properties and methods."
  },
  {
    "question": "What are the different ways to define types in TypeScript?",
    "answer": "Types can be defined using primitive types, arrays, tuples, enums, interfaces, or type aliases."
  },
  {
    "question": "What is an Enum in TypeScript?",
    "answer": "An enum is a way to define a set of named constants."
  },
  {
    "question": "How does TypeScript handle null and undefined?",
    "answer": "TypeScript has strict null checks that distinguish between null, undefined, and other types when configured with --strictNullChecks."
  },
  {
    "question": "What is a class in TypeScript?",
    "answer": "A class is a blueprint for creating objects with properties and methods."
  }
]
